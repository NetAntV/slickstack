#!/bin/bash

####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: littlebizzy/slickstack/blob/master/bash/ss-check.txt ##################################
#### path: /var/www/ss-check #######################################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: Retrieves all SlickStack bash scripts and cron jobs (except for ss-check) ############
#### module version: Ubuntu 18.04 to 24.04 LTS #####################################################
#### sourced by: ss-install, ss-update-modules #####################################################
#### bash aliases: ss check ########################################################################
####################################################################################################

####################################################################################################
#### TABLE OF CONTENTS (SS-Check) ##################################################################
####################################################################################################

## this is a brief summary of the different code snippets you will find in this script ##
## each section should be commented so you understand what is being accomplished ##

## A. Source SS-Config + SS-Functions
## B. Touch Timestamp File
## C. Message (Begin Script)
## D. Download Cron Jobs
## E. Download Custom Cron Job Boilerplates
## F. Download Bash Scripts (Except SS-Check)
## G. Install Cron Jobs
## H. Install Custom Cron Job Boilerplates (If Not Exist)

## I. Install Bash Scripts (Except SS-Check)

####################################################################################################
#### A. SS-Check: Source SS-Config + SS-Functions ##################################################
####################################################################################################

## before anything else we must source the critical variables that power this script ##
## ss-config is setup during ss-install wizard but ss-functions is hardcoded ##

## source ss-config ##
source /var/www/ss-config

## source ss-functions ##
source /var/www/ss-functions

## BELOW THIS RELIES ON SS-CONFIG AND SS-FUNCTIONS

####################################################################################################
#### B. SS-Check: Touch Timestamp File #############################################################
####################################################################################################

## this is a dummy timestamp file that will remember the last time this script was run ##
## it can be useful for developer reference and is sometimes used by SlickStack ##

ss_touch "${TIMESTAMP_SS_CHECK}"

####################################################################################################
#### C. SS-Check: Message (Begin Script) ###########################################################
####################################################################################################

## this is a simple message that announces to the shell the purpose of this bash script ##
## it will only be seen by sudo users who manually run this script in the shell ##

ss_echo "${COLOR_INFO}Running ss-check... ${COLOR_RESET}"

####################################################################################################
#### D. SS-Check: Download Cron Jobs ###############################################################
####################################################################################################

## here we retrieve all the latest cron jobs and bash scripts to ensure they are current ##
## this process does not affect ss-config, LEMP modules, or the ss-check script ##

## download 00-crontab from github first then gitlab then sourceforge ##
ss_wget "${TMP_00_CRONTAB}" "${GITHUB_00_CRONTAB}"
[[ -f "${TMP_00_CRONTAB}" && -z $(grep 'SS_EOF' "${TMP_00_CRONTAB}") ]] && ss_wget "${TMP_00_CRONTAB}" "${GITLAB_00_CRONTAB}"
[[ -f "${TMP_00_CRONTAB}" && -z $(grep 'SS_EOF' "${TMP_00_CRONTAB}") ]] && ss_wget "${TMP_00_CRONTAB}" "${SOURCEFORGE_00_CRONTAB}"

## download 01-cron-minutely from github first then gitlab then sourceforge ##
ss_wget "${TMP_01_CRON_MINUTELY}" "${GITHUB_01_CRON_MINUTELY}"
[[ -f "${TMP_01_CRON_MINUTELY}" && -z $(grep 'SS_EOF' "${TMP_01_CRON_MINUTELY}") ]] && ss_wget "${TMP_01_CRON_MINUTELY}" "${GITLAB_01_CRON_MINUTELY}"
[[ -f "${TMP_01_CRON_MINUTELY}" && -z $(grep 'SS_EOF' "${TMP_01_CRON_MINUTELY}") ]] && ss_wget "${TMP_01_CRON_MINUTELY}" "${SOURCEFORGE_01_CRON_MINUTELY}"

## download 02-cron-often from github first then gitlab then sourceforge ##
ss_wget "${TMP_02_CRON_OFTEN}" "${GITHUB_02_CRON_OFTEN}"
[[ -f "${TMP_02_CRON_OFTEN}" && -z $(grep 'SS_EOF' "${TMP_02_CRON_OFTEN}") ]] && ss_wget "${TMP_02_CRON_OFTEN}" "${GITLAB_02_CRON_OFTEN}"
[[ -f "${TMP_02_CRON_OFTEN}" && -z $(grep 'SS_EOF' "${TMP_02_CRON_OFTEN}") ]] && ss_wget "${TMP_02_CRON_OFTEN}" "${SOURCEFORGE_02_CRON_OFTEN}"

## download 03-cron-regular from github first then gitlab then sourceforge ##
ss_wget "${TMP_03_CRON_REGULAR}" "${GITHUB_03_CRON_REGULAR}"
[[ -f "${TMP_03_CRON_REGULAR}" && -z $(grep 'SS_EOF' "${TMP_03_CRON_REGULAR}") ]] && ss_wget "${TMP_03_CRON_REGULAR}" "${GITLAB_03_CRON_REGULAR}"
[[ -f "${TMP_03_CRON_REGULAR}" && -z $(grep 'SS_EOF' "${TMP_03_CRON_REGULAR}") ]] && ss_wget "${TMP_03_CRON_REGULAR}" "${SOURCEFORGE_03_CRON_REGULAR}"

## download 04-cron-quarter-hourly from github first then gitlab then sourceforge ##
ss_wget "${TMP_04_CRON_QUARTER_HOURLY}" "${GITHUB_04_CRON_QUARTER_HOURLY}"
[[ -f "${TMP_04_CRON_QUARTER_HOURLY}" && -z $(grep 'SS_EOF' "${TMP_04_CRON_QUARTER_HOURLY}") ]] && ss_wget "${TMP_04_CRON_QUARTER_HOURLY}" "${GITLAB_04_CRON_QUARTER_HOURLY}"
[[ -f "${TMP_04_CRON_QUARTER_HOURLY}" && -z $(grep 'SS_EOF' "${TMP_04_CRON_QUARTER_HOURLY}") ]] && ss_wget "${TMP_04_CRON_QUARTER_HOURLY}" "${SOURCEFORGE_04_CRON_QUARTER_HOURLY}"

## download 05-cron-half-hourly from github first then gitlab then sourceforge ##
ss_wget "${TMP_05_CRON_HALF_HOURLY}" "${GITHUB_05_CRON_HALF_HOURLY}"
[[ -f "${TMP_05_CRON_HALF_HOURLY}" && -z $(grep 'SS_EOF' "${TMP_05_CRON_HALF_HOURLY}") ]] && ss_wget "${TMP_05_CRON_HALF_HOURLY}" "${GITLAB_05_CRON_HALF_HOURLY}"
[[ -f "${TMP_05_CRON_HALF_HOURLY}" && -z $(grep 'SS_EOF' "${TMP_05_CRON_HALF_HOURLY}") ]] && ss_wget "${TMP_05_CRON_HALF_HOURLY}" "${SOURCEFORGE_05_CRON_HALF_HOURLY}"

## download 06-cron-hourly from github first then gitlab then sourceforge ##
ss_wget "${TMP_06_CRON_HOURLY}" "${GITHUB_06_CRON_HOURLY}"
[[ -f "${TMP_06_CRON_HOURLY}" && -z $(grep 'SS_EOF' "${TMP_06_CRON_HOURLY}") ]] && ss_wget "${TMP_06_CRON_HOURLY}" "${GITLAB_06_CRON_HOURLY}"
[[ -f "${TMP_06_CRON_HOURLY}" && -z $(grep 'SS_EOF' "${TMP_06_CRON_HOURLY}") ]] && ss_wget "${TMP_06_CRON_HOURLY}" "${SOURCEFORGE_06_CRON_HOURLY}"

## download 07-cron-quarter-daily from github first then gitlab then sourceforge ##
ss_wget "${TMP_07_CRON_QUARTER_DAILY}" "${GITHUB_07_CRON_QUARTER_DAILY}"
[[ -f "${TMP_07_CRON_QUARTER_DAILY}" && -z $(grep 'SS_EOF' "${TMP_07_CRON_QUARTER_DAILY}") ]] && ss_wget "${TMP_07_CRON_QUARTER_DAILY}" "${GITLAB_07_CRON_QUARTER_DAILY}"
[[ -f "${TMP_07_CRON_QUARTER_DAILY}" && -z $(grep 'SS_EOF' "${TMP_07_CRON_QUARTER_DAILY}") ]] && ss_wget "${TMP_07_CRON_QUARTER_DAILY}" "${SOURCEFORGE_07_CRON_QUARTER_DAILY}"

## download 08-cron-half-daily from github first then gitlab then sourceforge ##
ss_wget "${TMP_08_CRON_HALF_DAILY}" "${GITHUB_08_CRON_HALF_DAILY}"
[[ -f "${TMP_08_CRON_HALF_DAILY}" && -z $(grep 'SS_EOF' "${TMP_08_CRON_HALF_DAILY}") ]] && ss_wget "${TMP_08_CRON_HALF_DAILY}" "${GITLAB_08_CRON_HALF_DAILY}"
[[ -f "${TMP_08_CRON_HALF_DAILY}" && -z $(grep 'SS_EOF' "${TMP_08_CRON_HALF_DAILY}") ]] && ss_wget "${TMP_08_CRON_HALF_DAILY}" "${SOURCEFORGE_08_CRON_HALF_DAILY}"

## download 09-cron-daily from github first then gitlab then sourceforge ##
ss_wget "${TMP_09_CRON_DAILY}" "${GITHUB_09_CRON_DAILY}"
[[ -f "${TMP_09_CRON_DAILY}" && -z $(grep 'SS_EOF' "${TMP_09_CRON_DAILY}") ]] && ss_wget "${TMP_09_CRON_DAILY}" "${GITLAB_09_CRON_DAILY}"
[[ -f "${TMP_09_CRON_DAILY}" && -z $(grep 'SS_EOF' "${TMP_09_CRON_DAILY}") ]] && ss_wget "${TMP_09_CRON_DAILY}" "${SOURCEFORGE_09_CRON_DAILY}"

## download 10-cron-half-weekly from github first then gitlab then sourceforge ##
ss_wget "${TMP_10_CRON_HALF_WEEKLY}" "${GITHUB_10_CRON_HALF_WEEKLY}"
[[ -f "${TMP_10_CRON_HALF_WEEKLY}" && -z $(grep 'SS_EOF' "${TMP_10_CRON_HALF_WEEKLY}") ]] && ss_wget "${TMP_10_CRON_HALF_WEEKLY}" "${GITLAB_10_CRON_HALF_WEEKLY}"
[[ -f "${TMP_10_CRON_HALF_WEEKLY}" && -z $(grep 'SS_EOF' "${TMP_10_CRON_HALF_WEEKLY}") ]] && ss_wget "${TMP_10_CRON_HALF_WEEKLY}" "${SOURCEFORGE_10_CRON_HALF_WEEKLY}"

## download 11-cron-weekly from github first then gitlab then sourceforge ##
ss_wget "${TMP_11_CRON_WEEKLY}" "${GITHUB_11_CRON_WEEKLY}"
[[ -f "${TMP_11_CRON_WEEKLY}" && -z $(grep 'SS_EOF' "${TMP_11_CRON_WEEKLY}") ]] && ss_wget "${TMP_11_CRON_WEEKLY}" "${GITLAB_11_CRON_WEEKLY}"
[[ -f "${TMP_11_CRON_WEEKLY}" && -z $(grep 'SS_EOF' "${TMP_11_CRON_WEEKLY}") ]] && ss_wget "${TMP_11_CRON_WEEKLY}" "${SOURCEFORGE_11_CRON_WEEKLY}"

## download 12-cron-half-monthly from github first then gitlab then sourceforge ##
ss_wget "${TMP_12_CRON_HALF_MONTHLY}" "${GITHUB_12_CRON_HALF_MONTHLY}"
[[ -f "${TMP_12_CRON_HALF_MONTHLY}" && -z $(grep 'SS_EOF' "${TMP_12_CRON_HALF_MONTHLY}") ]] && ss_wget "${TMP_12_CRON_HALF_MONTHLY}" "${GITLAB_12_CRON_HALF_MONTHLY}"
[[ -f "${TMP_12_CRON_HALF_MONTHLY}" && -z $(grep 'SS_EOF' "${TMP_12_CRON_HALF_MONTHLY}") ]] && ss_wget "${TMP_12_CRON_HALF_MONTHLY}" "${SOURCEFORGE_12_CRON_HALF_MONTHLY}"

## download 13-cron-monthly from github first then gitlab then sourceforge ##
ss_wget "${TMP_13_CRON_MONTHLY}" "${GITHUB_13_CRON_MONTHLY}"
[[ -f "${TMP_13_CRON_MONTHLY}" && -z $(grep 'SS_EOF' "${TMP_13_CRON_MONTHLY}") ]] && ss_wget "${TMP_13_CRON_MONTHLY}" "${GITLAB_13_CRON_MONTHLY}"
[[ -f "${TMP_13_CRON_MONTHLY}" && -z $(grep 'SS_EOF' "${TMP_13_CRON_MONTHLY}") ]] && ss_wget "${TMP_13_CRON_MONTHLY}" "${SOURCEFORGE_13_CRON_MONTHLY}"

## download 14-cron-sometimes from github first then gitlab then sourceforge ##
ss_wget "${TMP_14_CRON_SOMETIMES}" "${GITHUB_14_CRON_SOMETIMES}"
[[ -f "${TMP_14_CRON_SOMETIMES}" && -z $(grep 'SS_EOF' "${TMP_14_CRON_SOMETIMES}") ]] && ss_wget "${TMP_14_CRON_SOMETIMES}" "${GITLAB_14_CRON_SOMETIMES}"
[[ -f "${TMP_14_CRON_SOMETIMES}" && -z $(grep 'SS_EOF' "${TMP_14_CRON_SOMETIMES}") ]] && ss_wget "${TMP_14_CRON_SOMETIMES}" "${SOURCEFORGE_14_CRON_SOMETIMES}"

####################################################################################################
#### E. SS-Check: Download Custom Cron Job Boilerplates ############################################
####################################################################################################

## here we retrieve all the latest cron jobs and bash scripts to ensure they are current ##
## this process does not affect ss-config, LEMP modules, or the ss-check script ##

## download 01-cron-minutely-custom from github first then gitlab then sourceforge ##
ss_wget "${TMP_01_CRON_MINUTELY_CUSTOM}" "${GITHUB_01_CRON_MINUTELY_CUSTOM}"
[[ -f "${TMP_01_CRON_MINUTELY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_01_CRON_MINUTELY_CUSTOM}") ]] && ss_wget "${TMP_01_CRON_MINUTELY_CUSTOM}" "${GITLAB_01_CRON_MINUTELY_CUSTOM}"
[[ -f "${TMP_01_CRON_MINUTELY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_01_CRON_MINUTELY_CUSTOM}") ]] && ss_wget "${TMP_01_CRON_MINUTELY_CUSTOM}" "${SOURCEFORGE_01_CRON_MINUTELY_CUSTOM}"

## download 02-cron-often-custom from github first then gitlab then sourceforge ##
ss_wget "${TMP_02_CRON_OFTEN_CUSTOM}" "${GITHUB_02_CRON_OFTEN_CUSTOM}"
[[ -f "${TMP_02_CRON_OFTEN_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_02_CRON_OFTEN_CUSTOM}") ]] && ss_wget "${TMP_02_CRON_OFTEN_CUSTOM}" "${GITLAB_02_CRON_OFTEN_CUSTOM}"
[[ -f "${TMP_02_CRON_OFTEN_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_02_CRON_OFTEN_CUSTOM}") ]] && ss_wget "${TMP_02_CRON_OFTEN_CUSTOM}" "${SOURCEFORGE_02_CRON_OFTEN_CUSTOM}"

## download 03-cron-regular-custom from github first then gitlab then sourceforge ##
ss_wget "${TMP_03_CRON_REGULAR_CUSTOM}" "${GITHUB_03_CRON_REGULAR_CUSTOM}"
[[ -f "${TMP_03_CRON_REGULAR_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_03_CRON_REGULAR_CUSTOM}") ]] && ss_wget "${TMP_03_CRON_REGULAR_CUSTOM}" "${GITLAB_03_CRON_REGULAR_CUSTOM}"
[[ -f "${TMP_03_CRON_REGULAR_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_03_CRON_REGULAR_CUSTOM}") ]] && ss_wget "${TMP_03_CRON_REGULAR_CUSTOM}" "${SOURCEFORGE_03_CRON_REGULAR_CUSTOM}"

## download 04-cron-quarter-hourly-custom from github first then gitlab then sourceforge ##
ss_wget "${TMP_04_CRON_QUARTER_HOURLY_CUSTOM}" "${GITHUB_04_CRON_QUARTER_HOURLY_CUSTOM}"
[[ -f "${TMP_04_CRON_QUARTER_HOURLY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_04_CRON_QUARTER_HOURLY_CUSTOM}") ]] && ss_wget "${TMP_04_CRON_QUARTER_HOURLY_CUSTOM}" "${GITLAB_04_CRON_QUARTER_HOURLY_CUSTOM}"
[[ -f "${TMP_04_CRON_QUARTER_HOURLY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_04_CRON_QUARTER_HOURLY_CUSTOM}") ]] && ss_wget "${TMP_04_CRON_QUARTER_HOURLY_CUSTOM}" "${SOURCEFORGE_04_CRON_QUARTER_HOURLY_CUSTOM}"

## download 05-cron-half-hourly-custom from github first then gitlab then sourceforge ##
ss_wget "${TMP_05_CRON_HALF_HOURLY_CUSTOM}" "${GITHUB_05_CRON_HALF_HOURLY_CUSTOM}"
[[ -f "${TMP_05_CRON_HALF_HOURLY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_05_CRON_HALF_HOURLY_CUSTOM}") ]] && ss_wget "${TMP_05_CRON_HALF_HOURLY_CUSTOM}" "${GITLAB_05_CRON_HALF_HOURLY_CUSTOM}"
[[ -f "${TMP_05_CRON_HALF_HOURLY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_05_CRON_HALF_HOURLY_CUSTOM}") ]] && ss_wget "${TMP_05_CRON_HALF_HOURLY_CUSTOM}" "${SOURCEFORGE_05_CRON_HALF_HOURLY_CUSTOM}"

## download 06-cron-hourly-custom from github first then gitlab then sourceforge ##
ss_wget "${TMP_06_CRON_HOURLY_CUSTOM}" "${GITHUB_06_CRON_HOURLY_CUSTOM}"
[[ -f "${TMP_06_CRON_HOURLY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_06_CRON_HOURLY_CUSTOM}") ]] && ss_wget "${TMP_06_CRON_HOURLY_CUSTOM}" "${GITLAB_06_CRON_HOURLY_CUSTOM}"
[[ -f "${TMP_06_CRON_HOURLY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_06_CRON_HOURLY_CUSTOM}") ]] && ss_wget "${TMP_06_CRON_HOURLY_CUSTOM}" "${SOURCEFORGE_06_CRON_HOURLY_CUSTOM}"

## download 07-cron-quarter-daily-custom from github first then gitlab then sourceforge ##
ss_wget "${TMP_07_CRON_QUARTER_DAILY_CUSTOM}" "${GITHUB_07_CRON_QUARTER_DAILY_CUSTOM}"
[[ -f "${TMP_07_CRON_QUARTER_DAILY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_07_CRON_QUARTER_DAILY_CUSTOM}") ]] && ss_wget "${TMP_07_CRON_QUARTER_DAILY_CUSTOM}" "${GITLAB_07_CRON_QUARTER_DAILY_CUSTOM}"
[[ -f "${TMP_07_CRON_QUARTER_DAILY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_07_CRON_QUARTER_DAILY_CUSTOM}") ]] && ss_wget "${TMP_07_CRON_QUARTER_DAILY_CUSTOM}" "${SOURCEFORGE_07_CRON_QUARTER_DAILY_CUSTOM}"

## download 08-cron-half-daily-custom from github first then gitlab then sourceforge ##
ss_wget "${TMP_08_CRON_HALF_DAILY_CUSTOM}" "${GITHUB_08_CRON_HALF_DAILY_CUSTOM}"
[[ -f "${TMP_08_CRON_HALF_DAILY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_08_CRON_HALF_DAILY_CUSTOM}") ]] && ss_wget "${TMP_08_CRON_HALF_DAILY_CUSTOM}" "${GITLAB_08_CRON_HALF_DAILY_CUSTOM}"
[[ -f "${TMP_08_CRON_HALF_DAILY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_08_CRON_HALF_DAILY_CUSTOM}") ]] && ss_wget "${TMP_08_CRON_HALF_DAILY_CUSTOM}" "${SOURCEFORGE_08_CRON_HALF_DAILY_CUSTOM}"

## download 09-cron-daily-custom from github first then gitlab then sourceforge ##
ss_wget "${TMP_09_CRON_DAILY_CUSTOM}" "${GITHUB_09_CRON_DAILY_CUSTOM}"
[[ -f "${TMP_09_CRON_DAILY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_09_CRON_DAILY_CUSTOM}") ]] && ss_wget "${TMP_09_CRON_DAILY_CUSTOM}" "${GITLAB_09_CRON_DAILY_CUSTOM}"
[[ -f "${TMP_09_CRON_DAILY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_09_CRON_DAILY_CUSTOM}") ]] && ss_wget "${TMP_09_CRON_DAILY_CUSTOM}" "${SOURCEFORGE_09_CRON_DAILY_CUSTOM}"

## download 10-cron-half-weekly-custom from github first then gitlab then sourceforge ##
ss_wget "${TMP_10_CRON_HALF_WEEKLY_CUSTOM}" "${GITHUB_10_CRON_HALF_WEEKLY_CUSTOM}"
[[ -f "${TMP_10_CRON_HALF_WEEKLY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_10_CRON_HALF_WEEKLY_CUSTOM}") ]] && ss_wget "${TMP_10_CRON_HALF_WEEKLY_CUSTOM}" "${GITLAB_10_CRON_HALF_WEEKLY_CUSTOM}"
[[ -f "${TMP_10_CRON_HALF_WEEKLY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_10_CRON_HALF_WEEKLY_CUSTOM}") ]] && ss_wget "${TMP_10_CRON_HALF_WEEKLY_CUSTOM}" "${SOURCEFORGE_10_CRON_HALF_WEEKLY_CUSTOM}"

## download 11-cron-weekly-custom from github first then gitlab then sourceforge ##
ss_wget "${TMP_11_CRON_WEEKLY_CUSTOM}" "${GITHUB_11_CRON_WEEKLY_CUSTOM}"
[[ -f "${TMP_11_CRON_WEEKLY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_11_CRON_WEEKLY_CUSTOM}") ]] && ss_wget "${TMP_11_CRON_WEEKLY_CUSTOM}" "${GITLAB_11_CRON_WEEKLY_CUSTOM}"
[[ -f "${TMP_11_CRON_WEEKLY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_11_CRON_WEEKLY_CUSTOM}") ]] && ss_wget "${TMP_11_CRON_WEEKLY_CUSTOM}" "${SOURCEFORGE_11_CRON_WEEKLY_CUSTOM}"

## download 12-cron-half-monthly-custom from github first then gitlab then sourceforge ##
ss_wget "${TMP_12_CRON_HALF_MONTHLY_CUSTOM}" "${GITHUB_12_CRON_HALF_MONTHLY_CUSTOM}"
[[ -f "${TMP_12_CRON_HALF_MONTHLY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_12_CRON_HALF_MONTHLY_CUSTOM}") ]] && ss_wget "${TMP_12_CRON_HALF_MONTHLY_CUSTOM}" "${GITLAB_12_CRON_HALF_MONTHLY_CUSTOM}"
[[ -f "${TMP_12_CRON_HALF_MONTHLY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_12_CRON_HALF_MONTHLY_CUSTOM}") ]] && ss_wget "${TMP_12_CRON_HALF_MONTHLY_CUSTOM}" "${SOURCEFORGE_12_CRON_HALF_MONTHLY_CUSTOM}"

## download 13-cron-monthly-custom from github first then gitlab then sourceforge ##
ss_wget "${TMP_13_CRON_MONTHLY_CUSTOM}" "${GITHUB_13_CRON_MONTHLY_CUSTOM}"
[[ -f "${TMP_13_CRON_MONTHLY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_13_CRON_MONTHLY_CUSTOM}") ]] && ss_wget "${TMP_13_CRON_MONTHLY_CUSTOM}" "${GITLAB_13_CRON_MONTHLY_CUSTOM}"
[[ -f "${TMP_13_CRON_MONTHLY_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_13_CRON_MONTHLY_CUSTOM}") ]] && ss_wget "${TMP_13_CRON_MONTHLY_CUSTOM}" "${SOURCEFORGE_13_CRON_MONTHLY_CUSTOM}"

## download 14-cron-sometimes-custom from github first then gitlab then sourceforge ##
ss_wget "${TMP_14_CRON_SOMETIMES_CUSTOM}" "${GITHUB_14_CRON_SOMETIMES_CUSTOM}"
[[ -f "${TMP_14_CRON_SOMETIMES_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_14_CRON_SOMETIMES_CUSTOM}") ]] && ss_wget "${TMP_14_CRON_SOMETIMES_CUSTOM}" "${GITLAB_14_CRON_SOMETIMES_CUSTOM}"
[[ -f "${TMP_14_CRON_SOMETIMES_CUSTOM}" && -z $(grep 'SS_EOF' "${TMP_14_CRON_SOMETIMES_CUSTOM}") ]] && ss_wget "${TMP_14_CRON_SOMETIMES_CUSTOM}" "${SOURCEFORGE_14_CRON_SOMETIMES_CUSTOM}"

####################################################################################################
#### F. SS-Check: Download Bash Scripts (Except SS-Check) ##########################################
####################################################################################################

## here we retrieve all the latest cron jobs and bash scripts to ensure they are current ##
## this process does not affect ss-config, LEMP modules, or the ss-check script ##

## download ss-clean-database from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_CLEAN_DATABASE}" "${GITHUB_SS_CLEAN_DATABASE}"
[[ -f "${TMP_SS_CLEAN_DATABASE}" && -z $(grep 'SS_EOF' "${TMP_SS_CLEAN_DATABASE}") ]] && ss_wget "${TMP_SS_CLEAN_DATABASE}" "${GITLAB_SS_CLEAN_DATABASE}"
[[ -f "${TMP_SS_CLEAN_DATABASE}" && -z $(grep 'SS_EOF' "${TMP_SS_CLEAN_DATABASE}") ]] && ss_wget "${TMP_SS_CLEAN_DATABASE}" "${SOURCEFORGE_SS_CLEAN_DATABASE}"

## download ss-clean-files from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_CLEAN_FILES}" "${GITHUB_SS_CLEAN_FILES}"
[[ -f "${TMP_SS_CLEAN_FILES}" && -z $(grep 'SS_EOF' "${TMP_SS_CLEAN_FILES}") ]] && ss_wget "${TMP_SS_CLEAN_FILES}" "${GITLAB_SS_CLEAN_FILES}"
[[ -f "${TMP_SS_CLEAN_FILES}" && -z $(grep 'SS_EOF' "${TMP_SS_CLEAN_FILES}") ]] && ss_wget "${TMP_SS_CLEAN_FILES}" "${SOURCEFORGE_SS_CLEAN_FILES}"

## download ss-config-sample from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_CONFIG_SAMPLE}" "${GITHUB_SS_CONFIG_SAMPLE}"
[[ -f "${TMP_SS_CONFIG_SAMPLE}" && -z $(grep 'SS_EOF' "${TMP_SS_CONFIG_SAMPLE}") ]] && ss_wget "${TMP_SS_CONFIG_SAMPLE}" "${GITLAB_SS_CONFIG_SAMPLE}"
[[ -f "${TMP_SS_CONFIG_SAMPLE}" && -z $(grep 'SS_EOF' "${TMP_SS_CONFIG_SAMPLE}") ]] && ss_wget "${TMP_SS_CONFIG_SAMPLE}" "${SOURCEFORGE_SS_CONFIG_SAMPLE}"

## download ss-dump-database from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_DUMP_DATABASE}" "${GITHUB_SS_DUMP_DATABASE}"
[[ -f "${TMP_SS_DUMP_DATABASE}" && -z $(grep 'SS_EOF' "${TMP_SS_DUMP_DATABASE}") ]] && ss_wget "${TMP_SS_DUMP_DATABASE}" "${GITLAB_SS_DUMP_DATABASE}"
[[ -f "${TMP_SS_DUMP_DATABASE}" && -z $(grep 'SS_EOF' "${TMP_SS_DUMP_DATABASE}") ]] && ss_wget "${TMP_SS_DUMP_DATABASE}" "${SOURCEFORGE_SS_DUMP_DATABASE}"

## download ss-dump-files from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_DUMP_FILES}" "${GITHUB_SS_DUMP_FILES}"
[[ -f "${TMP_SS_DUMP_FILES}" && -z $(grep 'SS_EOF' "${TMP_SS_DUMP_FILES}") ]] && ss_wget "${TMP_SS_DUMP_FILES}" "${GITLAB_SS_DUMP_FILES}"
[[ -f "${TMP_SS_DUMP_FILES}" && -z $(grep 'SS_EOF' "${TMP_SS_DUMP_FILES}") ]] && ss_wget "${TMP_SS_DUMP_FILES}" "${SOURCEFORGE_SS_DUMP_FILES}"

## download ss-empty-logs from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_EMPTY_LOGS}" "${GITHUB_SS_EMPTY_LOGS}"
[[ -f "${TMP_SS_EMPTY_LOGS}" && -z $(grep 'SS_EOF' "${TMP_SS_EMPTY_LOGS}") ]] && ss_wget "${TMP_SS_EMPTY_LOGS}" "${GITLAB_SS_EMPTY_LOGS}"
[[ -f "${TMP_SS_EMPTY_LOGS}" && -z $(grep 'SS_EOF' "${TMP_SS_EMPTY_LOGS}") ]] && ss_wget "${TMP_SS_EMPTY_LOGS}" "${SOURCEFORGE_SS_EMPTY_LOGS}"

## download ss-encrypt-acme from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_ENCRYPT_ACME}" "${GITHUB_SS_ENCRYPT_ACME}"
[[ -f "${TMP_SS_ENCRYPT_ACME}" && -z $(grep 'SS_EOF' "${TMP_SS_ENCRYPT_ACME}") ]] && ss_wget "${TMP_SS_ENCRYPT_ACME}" "${GITLAB_SS_ENCRYPT_ACME}"
[[ -f "${TMP_SS_ENCRYPT_ACME}" && -z $(grep 'SS_EOF' "${TMP_SS_ENCRYPT_ACME}") ]] && ss_wget "${TMP_SS_ENCRYPT_ACME}" "${SOURCEFORGE_SS_ENCRYPT_ACME}"

## download ss-encrypt-certbot from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_ENCRYPT_CERTBOT}" "${GITHUB_SS_ENCRYPT_CERTBOT}"
[[ -f "${TMP_SS_ENCRYPT_CERTBOT}" && -z $(grep 'SS_EOF' "${TMP_SS_ENCRYPT_CERTBOT}") ]] && ss_wget "${TMP_SS_ENCRYPT_CERTBOT}" "${GITLAB_SS_ENCRYPT_CERTBOT}"
[[ -f "${TMP_SS_ENCRYPT_CERTBOT}" && -z $(grep 'SS_EOF' "${TMP_SS_ENCRYPT_CERTBOT}") ]] && ss_wget "${TMP_SS_ENCRYPT_CERTBOT}" "${SOURCEFORGE_SS_ENCRYPT_CERTBOT}"

## download ss-encrypt-openssl from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_ENCRYPT_OPENSSL}" "${GITHUB_SS_ENCRYPT_OPENSSL}"
[[ -f "${TMP_SS_ENCRYPT_OPENSSL}" && -z $(grep 'SS_EOF' "${TMP_SS_ENCRYPT_OPENSSL}" 2> /dev/null) ]] && ss_wget "${TMP_SS_ENCRYPT_OPENSSL}" "${GITLAB_SS_ENCRYPT_OPENSSL}"
[[ -f "${TMP_SS_ENCRYPT_OPENSSL}" && -z $(grep 'SS_EOF' "${TMP_SS_ENCRYPT_OPENSSL}" 2> /dev/null) ]] && ss_wget "${TMP_SS_ENCRYPT_OPENSSL}" "${SOURCEFORGE_SS_ENCRYPT_OPENSSL}"

## download ss-functions from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_FUNCTIONS}" "${GITHUB_SS_FUNCTIONS}"
[[ -f "${TMP_SS_FUNCTIONS}" && -z $(grep 'SS_EOF' "${TMP_SS_FUNCTIONS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_FUNCTIONS}" "${GITLAB_SS_FUNCTIONS}"
[[ -f "${TMP_SS_FUNCTIONS}" && -z $(grep 'SS_EOF' "${TMP_SS_FUNCTIONS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_FUNCTIONS}" "${SOURCEFORGE_SS_FUNCTIONS}"

## download ss-import-database from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_IMPORT_DATABASE}" "${GITHUB_SS_IMPORT_DATABASE}"
[[ -f "${TMP_SS_IMPORT_DATABASE}" && -z $(grep 'SS_EOF' "${TMP_SS_IMPORT_DATABASE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_IMPORT_DATABASE}" "${GITLAB_SS_IMPORT_DATABASE}"
[[ -f "${TMP_SS_IMPORT_DATABASE}" && -z $(grep 'SS_EOF' "${TMP_SS_IMPORT_DATABASE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_IMPORT_DATABASE}" "${SOURCEFORGE_SS_IMPORT_DATABASE}"

## download ss-import-files from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_IMPORT_FILES}" "${GITHUB_SS_IMPORT_FILES}"
[[ -f "${TMP_SS_IMPORT_FILES}" && -z $(grep 'SS_EOF' "${TMP_SS_IMPORT_FILES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_IMPORT_FILES}" "${GITLAB_SS_IMPORT_FILES}"
[[ -f "${TMP_SS_IMPORT_FILES}" && -z $(grep 'SS_EOF' "${TMP_SS_IMPORT_FILES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_IMPORT_FILES}" "${SOURCEFORGE_SS_IMPORT_FILES}"

## download ss-install from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL}" "${GITHUB_SS_INSTALL}"
[[ -f "${TMP_SS_INSTALL}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL}" "${GITLAB_SS_INSTALL}"
[[ -f "${TMP_SS_INSTALL}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL}" "${SOURCEFORGE_SS_INSTALL}"

## download ss-install-fail2ban-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_FAIL2BAN_CONFIG}" "${GITHUB_SS_INSTALL_FAIL2BAN_CONFIG}"
[[ -f "${TMP_SS_INSTALL_FAIL2BAN_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_FAIL2BAN_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_FAIL2BAN_CONFIG}" "${GITLAB_SS_INSTALL_FAIL2BAN_CONFIG}"
[[ -f "${TMP_SS_INSTALL_FAIL2BAN_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_FAIL2BAN_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_FAIL2BAN_CONFIG}" "${SOURCEFORGE_SS_INSTALL_FAIL2BAN_CONFIG}"

## download ss-install-fail2ban-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_FAIL2BAN_PACKAGES}" "${GITHUB_SS_INSTALL_FAIL2BAN_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_FAIL2BAN_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_FAIL2BAN_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_FAIL2BAN_PACKAGES}" "${GITLAB_SS_INSTALL_FAIL2BAN_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_FAIL2BAN_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_FAIL2BAN_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_FAIL2BAN_PACKAGES}" "${SOURCEFORGE_SS_INSTALL_FAIL2BAN_PACKAGES}"

## download ss-install-iptables-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_IPTABLES_CONFIG}" "${GITHUB_SS_INSTALL_IPTABLES_CONFIG}"
[[ -f "${TMP_SS_INSTALL_IPTABLES_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_IPTABLES_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_IPTABLES_CONFIG}" "${GITLAB_SS_INSTALL_IPTABLES_CONFIG}"
[[ -f "${TMP_SS_INSTALL_IPTABLES_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_IPTABLES_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_IPTABLES_CONFIG}" "${SOURCEFORGE_SS_INSTALL_IPTABLES_CONFIG}"

## download ss-install-iptables-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_IPTABLES_PACKAGES}" "${GITHUB_SS_INSTALL_IPTABLES_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_IPTABLES_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_IPTABLES_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_IPTABLES_PACKAGES}" "${GITLAB_SS_INSTALL_IPTABLES_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_IPTABLES_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_IPTABLES_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_IPTABLES_PACKAGES}" "${SOURCEFORGE_SS_INSTALL_IPTABLES_PACKAGES}"

## download ss-install-memcached-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_MEMCACHED_CONFIG}" "${GITHUB_SS_INSTALL_MEMCACHED_CONFIG}"
[[ -f "${TMP_SS_INSTALL_MEMCACHED_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_MEMCACHED_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_MEMCACHED_CONFIG}" "${GITLAB_SS_INSTALL_MEMCACHED_CONFIG}"
[[ -f "${TMP_SS_INSTALL_MEMCACHED_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_MEMCACHED_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_MEMCACHED_CONFIG}" "${SOURCEFORGE_SS_INSTALL_MEMCACHED_CONFIG}"

## download ss-install-memcached-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_MEMCACHED_PACKAGES}" "${GITHUB_SS_INSTALL_MEMCACHED_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_MEMCACHED_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_MEMCACHED_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_MEMCACHED_PACKAGES}" "${GITLAB_SS_INSTALL_MEMCACHED_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_MEMCACHED_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_MEMCACHED_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_MEMCACHED_PACKAGES}" "${SOURCEFORGE_SS_INSTALL_MEMCACHED_PACKAGES}"

## download ss-install-mysql-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_MYSQL_CONFIG}" "${GITHUB_SS_INSTALL_MYSQL_CONFIG}"
[[ -f "${TMP_SS_INSTALL_MYSQL_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_MYSQL_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_MYSQL_CONFIG}" "${GITLAB_SS_INSTALL_MYSQL_CONFIG}"
[[ -f "${TMP_SS_INSTALL_MYSQL_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_MYSQL_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_MYSQL_CONFIG}" "${SOURCEFORGE_SS_INSTALL_MYSQL_CONFIG}"

## download ss-install-mysql-database from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_MYSQL_DATABASE}" "${GITHUB_SS_INSTALL_MYSQL_DATABASE}"
[[ -f "${TMP_SS_INSTALL_MYSQL_DATABASE}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_MYSQL_DATABASE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_MYSQL_DATABASE}" "${GITLAB_SS_INSTALL_MYSQL_DATABASE}"
[[ -f "${TMP_SS_INSTALL_MYSQL_DATABASE}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_MYSQL_DATABASE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_MYSQL_DATABASE}" "${SOURCEFORGE_SS_INSTALL_MYSQL_DATABASE}"

## download ss-install-mysql-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_MYSQL_PACKAGES}" "${GITHUB_SS_INSTALL_MYSQL_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_MYSQL_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_MYSQL_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_MYSQL_PACKAGES}" "${GITLAB_SS_INSTALL_MYSQL_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_MYSQL_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_MYSQL_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_MYSQL_PACKAGES}" "${SOURCEFORGE_SS_INSTALL_MYSQL_PACKAGES}"

## download ss-install-nginx-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_NGINX_CONFIG}" "${GITHUB_SS_INSTALL_NGINX_CONFIG}"
[[ -f "${TMP_SS_INSTALL_NGINX_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_NGINX_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_NGINX_CONFIG}" "${GITLAB_SS_INSTALL_NGINX_CONFIG}"
[[ -f "${TMP_SS_INSTALL_NGINX_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_NGINX_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_NGINX_CONFIG}" "${SOURCEFORGE_SS_INSTALL_NGINX_CONFIG}"

## download ss-install-nginx-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_NGINX_PACKAGES}" "${GITHUB_SS_INSTALL_NGINX_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_NGINX_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_NGINX_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_NGINX_PACKAGES}" "${GITLAB_SS_INSTALL_NGINX_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_NGINX_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_NGINX_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_NGINX_PACKAGES}" "${SOURCEFORGE_SS_INSTALL_NGINX_PACKAGES}"

## download ss-install-php-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_PHP_CONFIG}" "${GITHUB_SS_INSTALL_PHP_CONFIG}"
[[ -f "${TMP_SS_INSTALL_PHP_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_PHP_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_PHP_CONFIG}" "${GITLAB_SS_INSTALL_PHP_CONFIG}"
[[ -f "${TMP_SS_INSTALL_PHP_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_PHP_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_PHP_CONFIG}" "${SOURCEFORGE_SS_INSTALL_PHP_CONFIG}"

## download ss-install-php-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_PHP_PACKAGES}" "${GITHUB_SS_INSTALL_PHP_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_PHP_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_PHP_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_PHP_PACKAGES}" "${GITLAB_SS_INSTALL_PHP_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_PHP_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_PHP_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_PHP_PACKAGES}" "${SOURCEFORGE_SS_INSTALL_PHP_PACKAGES}"

## download ss-install-rclone-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_RCLONE_CONFIG}" "${GITHUB_SS_INSTALL_RCLONE_CONFIG}"
[[ -f "${TMP_SS_INSTALL_RCLONE_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_RCLONE_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_RCLONE_CONFIG}" "${GITLAB_SS_INSTALL_RCLONE_CONFIG}"
[[ -f "${TMP_SS_INSTALL_RCLONE_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_RCLONE_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_RCLONE_CONFIG}" "${SOURCEFORGE_SS_INSTALL_RCLONE_CONFIG}"

## download ss-install-rclone-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_RCLONE_PACKAGES}" "${GITHUB_SS_INSTALL_RCLONE_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_RCLONE_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_RCLONE_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_RCLONE_PACKAGES}" "${GITLAB_SS_INSTALL_RCLONE_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_RCLONE_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_RCLONE_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_RCLONE_PACKAGES}" "${SOURCEFORGE_SS_INSTALL_RCLONE_PACKAGES}"

## download ss-install-ubuntu-bash from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_UBUNTU_BASH}" "${GITHUB_SS_INSTALL_UBUNTU_BASH}"
[[ -f "${TMP_SS_INSTALL_UBUNTU_BASH}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_BASH}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_UBUNTU_BASH}" "${GITLAB_SS_INSTALL_UBUNTU_BASH}"
[[ -f "${TMP_SS_INSTALL_UBUNTU_BASH}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_BASH}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_UBUNTU_BASH}" "${SOURCEFORGE_SS_INSTALL_UBUNTU_BASH}"

## download ss-install-ubuntu-crontab from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_UBUNTU_CRONTAB}" "${GITHUB_SS_INSTALL_UBUNTU_CRONTAB}"
[[ -f "${TMP_SS_INSTALL_UBUNTU_CRONTAB}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_CRONTAB}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_UBUNTU_CRONTAB}" "${GITLAB_SS_INSTALL_UBUNTU_CRONTAB}"
[[ -f "${TMP_SS_INSTALL_UBUNTU_CRONTAB}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_CRONTAB}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_UBUNTU_CRONTAB}" "${SOURCEFORGE_SS_INSTALL_UBUNTU_CRONTAB}"

## download ss-install-ubuntu-kernel from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_UBUNTU_KERNEL}" "${GITHUB_SS_INSTALL_UBUNTU_KERNEL}"
[[ -f "${TMP_SS_INSTALL_UBUNTU_KERNEL}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_KERNEL}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_UBUNTU_KERNEL}" "${GITLAB_SS_INSTALL_UBUNTU_KERNEL}"
[[ -f "${TMP_SS_INSTALL_UBUNTU_KERNEL}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_KERNEL}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_UBUNTU_KERNEL}" "${SOURCEFORGE_SS_INSTALL_UBUNTU_KERNEL}"

## download ss-install-ubuntu-ssh from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_UBUNTU_SSH}" "${GITHUB_SS_INSTALL_UBUNTU_SSH}"
[[ -f "${TMP_SS_INSTALL_UBUNTU_SSH}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_SSH}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_UBUNTU_SSH}" "${GITLAB_SS_INSTALL_UBUNTU_SSH}"
[[ -f "${TMP_SS_INSTALL_UBUNTU_SSH}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_SSH}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_UBUNTU_SSH}" "${SOURCEFORGE_SS_INSTALL_UBUNTU_SSH}"

## download ss-install-ubuntu-swapfile from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_UBUNTU_SWAPFILE}" "${GITHUB_SS_INSTALL_UBUNTU_SWAPFILE}"
[[ -f "${TMP_SS_INSTALL_UBUNTU_SWAPFILE}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_SWAPFILE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_UBUNTU_SWAPFILE}" "${GITLAB_SS_INSTALL_UBUNTU_SWAPFILE}"
[[ -f "${TMP_SS_INSTALL_UBUNTU_SWAPFILE}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_SWAPFILE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_UBUNTU_SWAPFILE}" "${SOURCEFORGE_SS_INSTALL_UBUNTU_SWAPFILE}"

## download ss-install-ubuntu-users from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_UBUNTU_USERS}" "${GITHUB_SS_INSTALL_UBUNTU_USERS}"
[[ -f "${TMP_SS_INSTALL_UBUNTU_USERS}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_USERS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_UBUNTU_USERS}" "${GITLAB_SS_INSTALL_UBUNTU_USERS}"
[[ -f "${TMP_SS_INSTALL_UBUNTU_USERS}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_USERS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_UBUNTU_USERS}" "${SOURCEFORGE_SS_INSTALL_UBUNTU_USERS}"

## download ss-install-ubuntu-utils from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_UBUNTU_UTILS}" "${GITHUB_SS_INSTALL_UBUNTU_UTILS}"
[[ -f "${TMP_SS_INSTALL_UBUNTU_UTILS}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_UTILS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_UBUNTU_UTILS}" "${GITLAB_SS_INSTALL_UBUNTU_UTILS}"
[[ -f "${TMP_SS_INSTALL_UBUNTU_UTILS}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_UTILS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_UBUNTU_UTILS}" "${SOURCEFORGE_SS_INSTALL_UBUNTU_UTILS}"

## download ss-install-wordpress-cli from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_WORDPRESS_CLI}" "${GITHUB_SS_INSTALL_WORDPRESS_CLI}"
[[ -f "${TMP_SS_INSTALL_WORDPRESS_CLI}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_WORDPRESS_CLI}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_WORDPRESS_CLI}" "${GITLAB_SS_INSTALL_WORDPRESS_CLI}"
[[ -f "${TMP_SS_INSTALL_WORDPRESS_CLI}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_WORDPRESS_CLI}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_WORDPRESS_CLI}" "${SOURCEFORGE_SS_INSTALL_WORDPRESS_CLI}"

## download ss-install-wordpress-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_WORDPRESS_CONFIG}" "${GITHUB_SS_INSTALL_WORDPRESS_CONFIG}"
[[ -f "${TMP_SS_INSTALL_WORDPRESS_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_WORDPRESS_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_WORDPRESS_CONFIG}" "${GITLAB_SS_INSTALL_WORDPRESS_CONFIG}"
[[ -f "${TMP_SS_INSTALL_WORDPRESS_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_WORDPRESS_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_WORDPRESS_CONFIG}" "${SOURCEFORGE_SS_INSTALL_WORDPRESS_CONFIG}"

## download ss-install-wordpress-hovercraft from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_WORDPRESS_HOVERCRAFT}" "${GITHUB_SS_INSTALL_WORDPRESS_HOVERCRAFT}"
[[ -f "${TMP_SS_INSTALL_WORDPRESS_HOVERCRAFT}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_WORDPRESS_HOVERCRAFT}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_WORDPRESS_HOVERCRAFT}" "${GITLAB_SS_INSTALL_WORDPRESS_HOVERCRAFT}"
[[ -f "${TMP_SS_INSTALL_WORDPRESS_HOVERCRAFT}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_WORDPRESS_HOVERCRAFT}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_WORDPRESS_HOVERCRAFT}" "${SOURCEFORGE_SS_INSTALL_WORDPRESS_HOVERCRAFT}"

## download ss-install-wordpress-mu-plugins from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_WORDPRESS_MU_PLUGINS}" "${GITHUB_SS_INSTALL_WORDPRESS_MU_PLUGINS}"
[[ -f "${TMP_SS_INSTALL_WORDPRESS_MU_PLUGINS}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_WORDPRESS_MU_PLUGINS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_WORDPRESS_MU_PLUGINS}" "${GITLAB_SS_INSTALL_WORDPRESS_MU_PLUGINS}"
[[ -f "${TMP_SS_INSTALL_WORDPRESS_MU_PLUGINS}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_WORDPRESS_MU_PLUGINS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_WORDPRESS_MU_PLUGINS}" "${SOURCEFORGE_SS_INSTALL_WORDPRESS_MU_PLUGINS}"

## download ss-install-wordpress-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_INSTALL_WORDPRESS_PACKAGES}" "${GITHUB_SS_INSTALL_WORDPRESS_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_WORDPRESS_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_WORDPRESS_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_WORDPRESS_PACKAGES}" "${GITLAB_SS_INSTALL_WORDPRESS_PACKAGES}"
[[ -f "${TMP_SS_INSTALL_WORDPRESS_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_INSTALL_WORDPRESS_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_INSTALL_WORDPRESS_PACKAGES}" "${SOURCEFORGE_SS_INSTALL_WORDPRESS_PACKAGES}"

## download ss-maintenance-disable from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_MAINTENANCE_DISABLE}" "${GITHUB_SS_MAINTENANCE_DISABLE}"
[[ -f "${TMP_SS_MAINTENANCE_DISABLE}" && -z $(grep 'SS_EOF' "${TMP_SS_MAINTENANCE_DISABLE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_MAINTENANCE_DISABLE}" "${GITLAB_SS_MAINTENANCE_DISABLE}"
[[ -f "${TMP_SS_MAINTENANCE_DISABLE}" && -z $(grep 'SS_EOF' "${TMP_SS_MAINTENANCE_DISABLE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_MAINTENANCE_DISABLE}" "${SOURCEFORGE_SS_MAINTENANCE_DISABLE}"

## download ss-maintenance-enable from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_MAINTENANCE_ENABLE}" "${GITHUB_SS_MAINTENANCE_ENABLE}"
[[ -f "${TMP_SS_MAINTENANCE_ENABLE}" && -z $(grep 'SS_EOF' "${TMP_SS_MAINTENANCE_ENABLE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_MAINTENANCE_ENABLE}" "${GITLAB_SS_MAINTENANCE_ENABLE}"
[[ -f "${TMP_SS_MAINTENANCE_ENABLE}" && -z $(grep 'SS_EOF' "${TMP_SS_MAINTENANCE_ENABLE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_MAINTENANCE_ENABLE}" "${SOURCEFORGE_SS_MAINTENANCE_ENABLE}"

## download ss-monitor-resources from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_MONITOR_RESOURCES}" "${GITHUB_SS_MONITOR_RESOURCES}"
[[ -f "${TMP_SS_MONITOR_RESOURCES}" && -z $(grep 'SS_EOF' "${TMP_SS_MONITOR_RESOURCES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_MONITOR_RESOURCES}" "${GITLAB_SS_MONITOR_RESOURCES}"
[[ -f "${TMP_SS_MONITOR_RESOURCES}" && -z $(grep 'SS_EOF' "${TMP_SS_MONITOR_RESOURCES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_MONITOR_RESOURCES}" "${SOURCEFORGE_SS_MONITOR_RESOURCES}"

## download ss-optimize-database from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_OPTIMIZE_DATABASE}" "${GITHUB_SS_OPTIMIZE_DATABASE}"
[[ -f "${TMP_SS_OPTIMIZE_DATABASE}" && -z $(grep 'SS_EOF' "${TMP_SS_OPTIMIZE_DATABASE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_OPTIMIZE_DATABASE}" "${GITLAB_SS_OPTIMIZE_DATABASE}"
[[ -f "${TMP_SS_OPTIMIZE_DATABASE}" && -z $(grep 'SS_EOF' "${TMP_SS_OPTIMIZE_DATABASE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_OPTIMIZE_DATABASE}" "${SOURCEFORGE_SS_OPTIMIZE_DATABASE}"

## download ss-optimize-files from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_OPTIMIZE_FILES}" "${GITHUB_SS_OPTIMIZE_FILES}"
[[ -f "${TMP_SS_OPTIMIZE_FILES}" && -z $(grep 'SS_EOF' "${TMP_SS_OPTIMIZE_FILES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_OPTIMIZE_FILES}" "${GITLAB_SS_OPTIMIZE_FILES}"
[[ -f "${TMP_SS_OPTIMIZE_FILES}" && -z $(grep 'SS_EOF' "${TMP_SS_OPTIMIZE_FILES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_OPTIMIZE_FILES}" "${SOURCEFORGE_SS_OPTIMIZE_FILES}"

## download ss-perms from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS}" "${GITHUB_SS_PERMS}"
[[ -f "${TMP_SS_PERMS}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS}" "${GITLAB_SS_PERMS}"
[[ -f "${TMP_SS_PERMS}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS}" "${SOURCEFORGE_SS_PERMS}"

## download ss-perms-fail2ban-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_FAIL2BAN_CONFIG}" "${GITHUB_SS_PERMS_FAIL2BAN_CONFIG}"
[[ -f "${TMP_SS_PERMS_FAIL2BAN_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_FAIL2BAN_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_FAIL2BAN_CONFIG}" "${GITLAB_SS_PERMS_FAIL2BAN_CONFIG}"
[[ -f "${TMP_SS_PERMS_FAIL2BAN_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_FAIL2BAN_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_FAIL2BAN_CONFIG}" "${SOURCEFORGE_SS_PERMS_FAIL2BAN_CONFIG}"

## download ss-perms-fail2ban-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_FAIL2BAN_PACKAGES}" "${GITHUB_SS_PERMS_FAIL2BAN_PACKAGES}"
[[ -f "${TMP_SS_PERMS_FAIL2BAN_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_FAIL2BAN_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_FAIL2BAN_PACKAGES}" "${GITLAB_SS_PERMS_FAIL2BAN_PACKAGES}"
[[ -f "${TMP_SS_PERMS_FAIL2BAN_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_FAIL2BAN_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_FAIL2BAN_PACKAGES}" "${SOURCEFORGE_SS_PERMS_FAIL2BAN_PACKAGES}"

## download ss-perms-iptables-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_IPTABLES_CONFIG}" "${GITHUB_SS_PERMS_IPTABLES_CONFIG}"
[[ -f "${TMP_SS_PERMS_IPTABLES_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_IPTABLES_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_IPTABLES_CONFIG}" "${GITLAB_SS_PERMS_IPTABLES_CONFIG}"
[[ -f "${TMP_SS_PERMS_IPTABLES_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_IPTABLES_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_IPTABLES_CONFIG}" "${SOURCEFORGE_SS_PERMS_IPTABLES_CONFIG}"

## download ss-perms-iptables-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_IPTABLES_PACKAGES}" "${GITHUB_SS_PERMS_IPTABLES_PACKAGES}"
[[ -f "${TMP_SS_PERMS_IPTABLES_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_IPTABLES_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_IPTABLES_PACKAGES}" "${GITLAB_SS_PERMS_IPTABLES_PACKAGES}"
[[ -f "${TMP_SS_PERMS_IPTABLES_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_IPTABLES_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_IPTABLES_PACKAGES}" "${SOURCEFORGE_SS_PERMS_IPTABLES_PACKAGES}"

## download ss-perms-memcached-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_MEMCACHED_CONFIG}" "${GITHUB_SS_PERMS_MEMCACHED_CONFIG}"
[[ -f "${TMP_SS_PERMS_MEMCACHED_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_MEMCACHED_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_MEMCACHED_CONFIG}" "${GITLAB_SS_PERMS_MEMCACHED_CONFIG}"
[[ -f "${TMP_SS_PERMS_MEMCACHED_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_MEMCACHED_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_MEMCACHED_CONFIG}" "${SOURCEFORGE_SS_PERMS_MEMCACHED_CONFIG}"

## download ss-perms-memcached-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_MEMCACHED_PACKAGES}" "${GITHUB_SS_PERMS_MEMCACHED_PACKAGES}"
[[ -f "${TMP_SS_PERMS_MEMCACHED_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_MEMCACHED_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_MEMCACHED_PACKAGES}" "${GITLAB_SS_PERMS_MEMCACHED_PACKAGES}"
[[ -f "${TMP_SS_PERMS_MEMCACHED_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_MEMCACHED_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_MEMCACHED_PACKAGES}" "${SOURCEFORGE_SS_PERMS_MEMCACHED_PACKAGES}"

## download ss-perms-mysql-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_MYSQL_CONFIG}" "${GITHUB_SS_PERMS_MYSQL_CONFIG}"
[[ -f "${TMP_SS_PERMS_MYSQL_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_MYSQL_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_MYSQL_CONFIG}" "${GITLAB_SS_PERMS_MYSQL_CONFIG}"
[[ -f "${TMP_SS_PERMS_MYSQL_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_MYSQL_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_MYSQL_CONFIG}" "${SOURCEFORGE_SS_PERMS_MYSQL_CONFIG}"

## download ss-perms-mysql-database from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_MYSQL_DATABASE}" "${GITHUB_SS_PERMS_MYSQL_DATABASE}"
[[ -f "${TMP_SS_PERMS_MYSQL_DATABASE}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_MYSQL_DATABASE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_MYSQL_DATABASE}" "${GITLAB_SS_PERMS_MYSQL_DATABASE}"
[[ -f "${TMP_SS_PERMS_MYSQL_DATABASE}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_MYSQL_DATABASE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_MYSQL_DATABASE}" "${SOURCEFORGE_SS_PERMS_MYSQL_DATABASE}"

## download ss-perms-mySQL-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_MYSQL_PACKAGES}" "${GITHUB_SS_PERMS_MYSQL_PACKAGES}"
[[ -f "${TMP_SS_PERMS_MYSQL_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_MYSQL_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_MYSQL_PACKAGES}" "${GITLAB_SS_PERMS_MYSQL_PACKAGES}"
[[ -f "${TMP_SS_PERMS_MYSQL_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_MYSQL_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_MYSQL_PACKAGES}" "${SOURCEFORGE_SS_PERMS_MYSQL_PACKAGES}"

## download ss-perms-nginx-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_NGINX_CONFIG}" "${GITHUB_SS_PERMS_NGINX_CONFIG}"
[[ -f "${TMP_SS_PERMS_NGINX_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_NGINX_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_NGINX_CONFIG}" "${GITLAB_SS_PERMS_NGINX_CONFIG}"
[[ -f "${TMP_SS_PERMS_NGINX_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_NGINX_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_NGINX_CONFIG}" "${SOURCEFORGE_SS_PERMS_NGINX_CONFIG}"

## download ss-perms-nginx-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_NGINX_PACKAGES}" "${GITHUB_SS_PERMS_NGINX_PACKAGES}"
[[ -f "${TMP_SS_PERMS_NGINX_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_NGINX_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_NGINX_PACKAGES}" "${GITLAB_SS_PERMS_NGINX_PACKAGES}"
[[ -f "${TMP_SS_PERMS_NGINX_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_NGINX_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_NGINX_PACKAGES}" "${SOURCEFORGE_SS_PERMS_NGINX_PACKAGES}"

## download ss-perms-php-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_PHP_CONFIG}" "${GITHUB_SS_PERMS_PHP_CONFIG}"
[[ -f "${TMP_SS_PERMS_PHP_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_PHP_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_PHP_CONFIG}" "${GITLAB_SS_PERMS_PHP_CONFIG}"
[[ -f "${TMP_SS_PERMS_PHP_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_PHP_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_PHP_CONFIG}" "${SOURCEFORGE_SS_PERMS_PHP_CONFIG}"

## download ss-perms-php-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_PHP_PACKAGES}" "${GITHUB_SS_PERMS_PHP_PACKAGES}"
[[ -f "${TMP_SS_PERMS_PHP_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_PHP_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_PHP_PACKAGES}" "${GITLAB_SS_PERMS_PHP_PACKAGES}"
[[ -f "${TMP_SS_PERMS_PHP_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_PHP_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_PHP_PACKAGES}" "${SOURCEFORGE_SS_PERMS_PHP_PACKAGES}"

## download ss-perms-rclone-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_RCLONE_CONFIG}" "${GITHUB_SS_PERMS_RCLONE_CONFIG}"
[[ -f "${TMP_SS_PERMS_RCLONE_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_RCLONE_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_RCLONE_CONFIG}" "${GITLAB_SS_PERMS_RCLONE_CONFIG}"
[[ -f "${TMP_SS_PERMS_RCLONE_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_RCLONE_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_RCLONE_CONFIG}" "${SOURCEFORGE_SS_PERMS_RCLONE_CONFIG}"

## download ss-perms-rclone-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_RCLONE_PACKAGES}" "${GITHUB_SS_PERMS_RCLONE_PACKAGES}"
[[ -f "${TMP_SS_PERMS_RCLONE_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_RCLONE_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_RCLONE_PACKAGES}" "${GITLAB_SS_PERMS_RCLONE_PACKAGES}"
[[ -f "${TMP_SS_PERMS_RCLONE_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_RCLONE_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_RCLONE_PACKAGES}" "${SOURCEFORGE_SS_PERMS_RCLONE_PACKAGES}"

## download ss-perms-ubuntu-bash from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_UBUNTU_BASH}" "${GITHUB_SS_PERMS_UBUNTU_BASH}"
[[ -f "${TMP_SS_PERMS_UBUNTU_BASH}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_BASH}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_UBUNTU_BASH}" "${GITLAB_SS_PERMS_UBUNTU_BASH}"
[[ -f "${TMP_SS_PERMS_UBUNTU_BASH}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_BASH}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_UBUNTU_BASH}" "${SOURCEFORGE_SS_PERMS_UBUNTU_BASH}"

## download ss-perms-ubuntu-crontab from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_UBUNTU_CRONTAB}" "${GITHUB_SS_PERMS_UBUNTU_CRONTAB}"
[[ -f "${TMP_SS_PERMS_UBUNTU_CRONTAB}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_CRONTAB}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_UBUNTU_CRONTAB}" "${GITLAB_SS_PERMS_UBUNTU_CRONTAB}"
[[ -f "${TMP_SS_PERMS_UBUNTU_CRONTAB}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_CRONTAB}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_UBUNTU_CRONTAB}" "${SOURCEFORGE_SS_PERMS_UBUNTU_CRONTAB}"

## download ss-perms-ubuntu-kernel from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_UBUNTU_KERNEL}" "${GITHUB_SS_PERMS_UBUNTU_KERNEL}"
[[ -f "${TMP_SS_PERMS_UBUNTU_KERNEL}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_KERNEL}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_UBUNTU_KERNEL}" "${GITLAB_SS_PERMS_UBUNTU_KERNEL}"
[[ -f "${TMP_SS_PERMS_UBUNTU_KERNEL}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_KERNEL}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_UBUNTU_KERNEL}" "${SOURCEFORGE_SS_PERMS_UBUNTU_KERNEL}"

## download ss-perms-ubuntu-ssh from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_UBUNTU_SSH}" "${GITHUB_SS_PERMS_UBUNTU_SSH}"
[[ -f "${TMP_SS_PERMS_UBUNTU_SSH}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_SSH}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_UBUNTU_SSH}" "${GITLAB_SS_PERMS_UBUNTU_SSH}"
[[ -f "${TMP_SS_PERMS_UBUNTU_SSH}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_SSH}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_UBUNTU_SSH}" "${SOURCEFORGE_SS_PERMS_UBUNTU_SSH}"

## download ss-perms-ubuntu-swapfile from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_UBUNTU_SWAPFILE}" "${GITHUB_SS_PERMS_UBUNTU_SWAPFILE}"
[[ -f "${TMP_SS_PERMS_UBUNTU_SWAPFILE}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_SWAPFILE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_UBUNTU_SWAPFILE}" "${GITLAB_SS_PERMS_UBUNTU_SWAPFILE}"
[[ -f "${TMP_SS_PERMS_UBUNTU_SWAPFILE}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_SWAPFILE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_UBUNTU_SWAPFILE}" "${SOURCEFORGE_SS_PERMS_UBUNTU_SWAPFILE}"

## download ss-perms-ubuntu-users from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_UBUNTU_USERS}" "${GITHUB_SS_PERMS_UBUNTU_USERS}"
[[ -f "${TMP_SS_PERMS_UBUNTU_USERS}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_USERS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_UBUNTU_USERS}" "${GITLAB_SS_PERMS_UBUNTU_USERS}"
[[ -f "${TMP_SS_PERMS_UBUNTU_USERS}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_USERS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_UBUNTU_USERS}" "${SOURCEFORGE_SS_PERMS_UBUNTU_USERS}"

## download ss-perms-ubuntu-utils from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_UBUNTU_UTILS}" "${GITHUB_SS_PERMS_UBUNTU_UTILS}"
[[ -f "${TMP_SS_PERMS_UBUNTU_UTILS}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_UTILS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_UBUNTU_UTILS}" "${GITLAB_SS_PERMS_UBUNTU_UTILS}"
[[ -f "${TMP_SS_PERMS_UBUNTU_UTILS}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_UTILS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_UBUNTU_UTILS}" "${SOURCEFORGE_SS_PERMS_UBUNTU_UTILS}"

## download ss-perms-wordpress-cli from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_WORDPRESS_CLI}" "${GITHUB_SS_PERMS_WORDPRESS_CLI}"
[[ -f "${TMP_SS_PERMS_WORDPRESS_CLI}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_WORDPRESS_CLI}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_WORDPRESS_CLI}" "${GITLAB_SS_PERMS_WORDPRESS_CLI}"
[[ -f "${TMP_SS_PERMS_WORDPRESS_CLI}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_WORDPRESS_CLI}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_WORDPRESS_CLI}" "${SOURCEFORGE_SS_PERMS_WORDPRESS_CLI}"

## download ss-perms-wordpress-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_WORDPRESS_CONFIG}" "${GITHUB_SS_PERMS_WORDPRESS_CONFIG}"
[[ -f "${TMP_SS_PERMS_WORDPRESS_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_WORDPRESS_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_WORDPRESS_CONFIG}" "${GITLAB_SS_PERMS_WORDPRESS_CONFIG}"
[[ -f "${TMP_SS_PERMS_WORDPRESS_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_WORDPRESS_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_WORDPRESS_CONFIG}" "${SOURCEFORGE_SS_PERMS_WORDPRESS_CONFIG}"

## download ss-perms-wordpress-mu-plugins from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_WORDPRESS_MU_PLUGINS}" "${GITHUB_SS_PERMS_WORDPRESS_MU_PLUGINS}"
[[ -f "${TMP_SS_PERMS_WORDPRESS_MU_PLUGINS}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_WORDPRESS_MU_PLUGINS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_WORDPRESS_MU_PLUGINS}" "${GITLAB_SS_PERMS_WORDPRESS_MU_PLUGINS}"
[[ -f "${TMP_SS_PERMS_WORDPRESS_MU_PLUGINS}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_WORDPRESS_MU_PLUGINS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_WORDPRESS_MU_PLUGINS}" "${SOURCEFORGE_SS_PERMS_WORDPRESS_MU_PLUGINS}"

## download ss-perms-wordpress-packages from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PERMS_WORDPRESS_PACKAGES}" "${GITHUB_SS_PERMS_WORDPRESS_PACKAGES}"
[[ -f "${TMP_SS_PERMS_WORDPRESS_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_WORDPRESS_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_WORDPRESS_PACKAGES}" "${GITLAB_SS_PERMS_WORDPRESS_PACKAGES}"
[[ -f "${TMP_SS_PERMS_WORDPRESS_PACKAGES}" && -z $(grep 'SS_EOF' "${TMP_SS_PERMS_WORDPRESS_PACKAGES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PERMS_WORDPRESS_PACKAGES}" "${SOURCEFORGE_SS_PERMS_WORDPRESS_PACKAGES}"

## download ss-purge-nginx from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PURGE_NGINX}" "${GITHUB_SS_PURGE_NGINX}"
[[ -f "${TMP_SS_PURGE_NGINX}" && -z $(grep 'SS_EOF' "${TMP_SS_PURGE_NGINX}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PURGE_NGINX}" "${GITLAB_SS_PURGE_NGINX}"
[[ -f "${TMP_SS_PURGE_NGINX}" && -z $(grep 'SS_EOF' "${TMP_SS_PURGE_NGINX}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PURGE_NGINX}" "${SOURCEFORGE_SS_PURGE_NGINX}"

## download ss-purge-opcache from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PURGE_OPCACHE}" "${GITHUB_SS_PURGE_OPCACHE}"
[[ -f "${TMP_SS_PURGE_OPCACHE}" && -z $(grep 'SS_EOF' "${TMP_SS_PURGE_OPCACHE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PURGE_OPCACHE}" "${GITLAB_SS_PURGE_OPCACHE}"
[[ -f "${TMP_SS_PURGE_OPCACHE}" && -z $(grep 'SS_EOF' "${TMP_SS_PURGE_OPCACHE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PURGE_OPCACHE}" "${SOURCEFORGE_SS_PURGE_OPCACHE}"

## download ss-purge-memcached from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PURGE_MEMCACHED}" "${GITHUB_SS_PURGE_MEMCACHED}"
[[ -f "${TMP_SS_PURGE_MEMCACHED}" && -z $(grep 'SS_EOF' "${TMP_SS_PURGE_MEMCACHED}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PURGE_MEMCACHED}" "${GITLAB_SS_PURGE_MEMCACHED}"
[[ -f "${TMP_SS_PURGE_MEMCACHED}" && -z $(grep 'SS_EOF' "${TMP_SS_PURGE_MEMCACHED}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PURGE_MEMCACHED}" "${SOURCEFORGE_SS_PURGE_MEMCACHED}"

## download ss-purge-transients from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PURGE_TRANSIENTS}" "${GITHUB_SS_PURGE_TRANSIENTS}"
[[ -f "${TMP_SS_PURGE_TRANSIENTS}" && -z $(grep 'SS_EOF' "${TMP_SS_PURGE_TRANSIENTS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PURGE_TRANSIENTS}" "${GITLAB_SS_PURGE_TRANSIENTS}"
[[ -f "${TMP_SS_PURGE_TRANSIENTS}" && -z $(grep 'SS_EOF' "${TMP_SS_PURGE_TRANSIENTS}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PURGE_TRANSIENTS}" "${SOURCEFORGE_SS_PURGE_TRANSIENTS}"

## download ss-push-development from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PUSH_DEVELOPMENT}" "${GITHUB_SS_PUSH_DEVELOPMENT}"
[[ -f "${TMP_SS_PUSH_DEVELOPMENT}" && -z $(grep 'SS_EOF' "${TMP_SS_PUSH_DEVELOPMENT}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PUSH_DEVELOPMENT}" "${GITLAB_SS_PUSH_DEVELOPMENT}"
[[ -f "${TMP_SS_PUSH_DEVELOPMENT}" && -z $(grep 'SS_EOF' "${TMP_SS_PUSH_DEVELOPMENT}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PUSH_DEVELOPMENT}" "${SOURCEFORGE_SS_PUSH_DEVELOPMENT}"

## download ss-push-staging from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_PUSH_STAGING}" "${GITHUB_SS_PUSH_STAGING}"
[[ -f "${TMP_SS_PUSH_STAGING}" && -z $(grep 'SS_EOF' "${TMP_SS_PUSH_STAGING}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PUSH_STAGING}" "${GITLAB_SS_PUSH_STAGING}"
[[ -f "${TMP_SS_PUSH_STAGING}" && -z $(grep 'SS_EOF' "${TMP_SS_PUSH_STAGING}" 2> /dev/null) ]] && ss_wget "${TMP_SS_PUSH_STAGING}" "${SOURCEFORGE_SS_PUSH_STAGING}"

## download ss-reboot-machine from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_REBOOT_MACHINE}" "${GITHUB_SS_REBOOT_MACHINE}"
[[ -f "${TMP_SS_REBOOT_MACHINE}" && -z $(grep 'SS_EOF' "${TMP_SS_REBOOT_MACHINE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_REBOOT_MACHINE}" "${GITLAB_SS_REBOOT_MACHINE}"
[[ -f "${TMP_SS_REBOOT_MACHINE}" && -z $(grep 'SS_EOF' "${TMP_SS_REBOOT_MACHINE}" 2> /dev/null) ]] && ss_wget "${TMP_SS_REBOOT_MACHINE}" "${SOURCEFORGE_SS_REBOOT_MACHINE}"

## download ss-remote-backup from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_REMOTE_BACKUP}" "${GITHUB_SS_REMOTE_BACKUP}"
[[ -f "${TMP_SS_REMOTE_BACKUP}" && -z $(grep 'SS_EOF' "${TMP_SS_REMOTE_BACKUP}" 2> /dev/null) ]] && ss_wget "${TMP_SS_REMOTE_BACKUP}" "${GITLAB_SS_REMOTE_BACKUP}"
[[ -f "${TMP_SS_REMOTE_BACKUP}" && -z $(grep 'SS_EOF' "${TMP_SS_REMOTE_BACKUP}" 2> /dev/null) ]] && ss_wget "${TMP_SS_REMOTE_BACKUP}" "${SOURCEFORGE_SS_REMOTE_BACKUP}"

## download ss-reset-password-sftp from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_RESET_PASSWORD_SFTP}" "${GITHUB_SS_RESET_PASSWORD_SFTP}"
[[ -f "${TMP_SS_RESET_PASSWORD_SFTP}" && -z $(grep 'SS_EOF' "${TMP_SS_RESET_PASSWORD_SFTP}" 2> /dev/null) ]] && ss_wget "${TMP_SS_RESET_PASSWORD_SFTP}" "${GITLAB_SS_RESET_PASSWORD_SFTP}"
[[ -f "${TMP_SS_RESET_PASSWORD_SFTP}" && -z $(grep 'SS_EOF' "${TMP_SS_RESET_PASSWORD_SFTP}" 2> /dev/null) ]] && ss_wget "${TMP_SS_RESET_PASSWORD_SFTP}" "${SOURCEFORGE_SS_RESET_PASSWORD_SFTP}"

## download ss-restart-fail2ban from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_RESTART_FAIL2BAN}" "${GITHUB_SS_RESTART_FAIL2BAN}"
[[ -f "${TMP_SS_RESTART_FAIL2BAN}" && -z $(grep 'SS_EOF' "${TMP_SS_RESTART_FAIL2BAN}" 2> /dev/null) ]] && ss_wget "${TMP_SS_RESTART_FAIL2BAN}" "${GITLAB_SS_RESTART_FAIL2BAN}"
[[ -f "${TMP_SS_RESTART_FAIL2BAN}" && -z $(grep 'SS_EOF' "${TMP_SS_RESTART_FAIL2BAN}" 2> /dev/null) ]] && ss_wget "${TMP_SS_RESTART_FAIL2BAN}" "${SOURCEFORGE_SS_RESTART_FAIL2BAN}"

## download ss-restart-memcached from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_RESTART_MEMCACHED}" "${GITHUB_SS_RESTART_MEMCACHED}"
[[ -f "${TMP_SS_RESTART_MEMCACHED}" && -z $(grep 'SS_EOF' "${TMP_SS_RESTART_MEMCACHED}" 2> /dev/null) ]] && ss_wget "${TMP_SS_RESTART_MEMCACHED}" "${GITLAB_SS_RESTART_MEMCACHED}"
[[ -f "${TMP_SS_RESTART_MEMCACHED}" && -z $(grep 'SS_EOF' "${TMP_SS_RESTART_MEMCACHED}" 2> /dev/null) ]] && ss_wget "${TMP_SS_RESTART_MEMCACHED}" "${SOURCEFORGE_SS_RESTART_MEMCACHED}"

## download ss-restart-mysql from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_RESTART_MYSQL}" "${GITHUB_SS_RESTART_MYSQL}"
[[ -f "${TMP_SS_RESTART_MYSQL}" && -z $(grep 'SS_EOF' "${TMP_SS_RESTART_MYSQL}" 2> /dev/null) ]] && ss_wget "${TMP_SS_RESTART_MYSQL}" "${GITLAB_SS_RESTART_MYSQL}"
[[ -f "${TMP_SS_RESTART_MYSQL}" && -z $(grep 'SS_EOF' "${TMP_SS_RESTART_MYSQL}" 2> /dev/null) ]] && ss_wget "${TMP_SS_RESTART_MYSQL}" "${SOURCEFORGE_SS_RESTART_MYSQL}"

## download ss-restart-nginx from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_RESTART_NGINX}" "${GITHUB_SS_RESTART_NGINX}"
[[ -f "${TMP_SS_RESTART_NGINX}" && -z $(grep 'SS_EOF' "${TMP_SS_RESTART_NGINX}" 2> /dev/null) ]] && ss_wget "${TMP_SS_RESTART_NGINX}" "${GITLAB_SS_RESTART_NGINX}"
[[ -f "${TMP_SS_RESTART_NGINX}" && -z $(grep 'SS_EOF' "${TMP_SS_RESTART_NGINX}" 2> /dev/null) ]] && ss_wget "${TMP_SS_RESTART_NGINX}" "${SOURCEFORGE_SS_RESTART_NGINX}"

## download ss-restart-php from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_RESTART_PHP}" "${GITHUB_SS_RESTART_PHP}"
[[ -f "${TMP_SS_RESTART_PHP}" && -z $(grep 'SS_EOF' "${TMP_SS_RESTART_PHP}" 2> /dev/null) ]] && ss_wget "${TMP_SS_RESTART_PHP}" "${GITLAB_SS_RESTART_PHP}"
[[ -f "${TMP_SS_RESTART_PHP}" && -z $(grep 'SS_EOF' "${TMP_SS_RESTART_PHP}" 2> /dev/null) ]] && ss_wget "${TMP_SS_RESTART_PHP}" "${SOURCEFORGE_SS_RESTART_PHP}"

## download ss-stack-overview from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_STACK_OVERVIEW}" "${GITHUB_SS_STACK_OVERVIEW}"
[[ -f "${TMP_SS_STACK_OVERVIEW}" && -z $(grep 'SS_EOF' "${TMP_SS_STACK_OVERVIEW}" 2> /dev/null) ]] && ss_wget "${TMP_SS_STACK_OVERVIEW}" "${GITLAB_SS_STACK_OVERVIEW}"
[[ -f "${TMP_SS_STACK_OVERVIEW}" && -z $(grep 'SS_EOF' "${TMP_SS_STACK_OVERVIEW}" 2> /dev/null) ]] && ss_wget "${TMP_SS_STACK_OVERVIEW}" "${SOURCEFORGE_SS_STACK_OVERVIEW}"

## download ss-sync-development from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_SYNC_DEVELOPMENT}" "${GITHUB_SS_SYNC_DEVELOPMENT}"
[[ -f "${TMP_SS_SYNC_DEVELOPMENT}" && -z $(grep 'SS_EOF' "${TMP_SS_SYNC_DEVELOPMENT}" 2> /dev/null) ]] && ss_wget "${TMP_SS_SYNC_DEVELOPMENT}" "${GITLAB_SS_SYNC_DEVELOPMENT}"
[[ -f "${TMP_SS_SYNC_DEVELOPMENT}" && -z $(grep 'SS_EOF' "${TMP_SS_SYNC_DEVELOPMENT}" 2> /dev/null) ]] && ss_wget "${TMP_SS_SYNC_DEVELOPMENT}" "${SOURCEFORGE_SS_SYNC_DEVELOPMENT}"

## download ss-sync-staging from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_SYNC_STAGING}" "${GITHUB_SS_SYNC_STAGING}"
[[ -f "${TMP_SS_SYNC_STAGING}" && -z $(grep 'SS_EOF' "${TMP_SS_SYNC_STAGING}" 2> /dev/null) ]] && ss_wget "${TMP_SS_SYNC_STAGING}" "${GITLAB_SS_SYNC_STAGING}"
[[ -f "${TMP_SS_SYNC_STAGING}" && -z $(grep 'SS_EOF' "${TMP_SS_SYNC_STAGING}" 2> /dev/null) ]] && ss_wget "${TMP_SS_SYNC_STAGING}" "${SOURCEFORGE_SS_SYNC_STAGING}"

## download ss-update-config from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_UPDATE_CONFIG}" "${GITHUB_SS_UPDATE_CONFIG}"
[[ -f "${TMP_SS_UPDATE_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_UPDATE_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_UPDATE_CONFIG}" "${GITLAB_SS_UPDATE_CONFIG}"
[[ -f "${TMP_SS_UPDATE_CONFIG}" && -z $(grep 'SS_EOF' "${TMP_SS_UPDATE_CONFIG}" 2> /dev/null) ]] && ss_wget "${TMP_SS_UPDATE_CONFIG}" "${SOURCEFORGE_SS_UPDATE_CONFIG}"

## download ss-update-modules from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_UPDATE_MODULES}" "${GITHUB_SS_UPDATE_MODULES}"
[[ -f "${TMP_SS_UPDATE_MODULES}" && -z $(grep 'SS_EOF' "${TMP_SS_UPDATE_MODULES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_UPDATE_MODULES}" "${GITLAB_SS_UPDATE_MODULES}"
[[ -f "${TMP_SS_UPDATE_MODULES}" && -z $(grep 'SS_EOF' "${TMP_SS_UPDATE_MODULES}" 2> /dev/null) ]] && ss_wget "${TMP_SS_UPDATE_MODULES}" "${SOURCEFORGE_SS_UPDATE_MODULES}"

## download ss-worker from github first then gitlab then sourceforge ##
ss_wget "${TMP_SS_WORKER}" "${GITHUB_SS_WORKER}"
[[ -f "${TMP_SS_WORKER}" && -z $(grep 'SS_EOF' "${TMP_SS_WORKER}" 2> /dev/null) ]] && ss_wget "${TMP_SS_WORKER}" "${GITLAB_SS_WORKER}"
[[ -f "${TMP_SS_WORKER}" && -z $(grep 'SS_EOF' "${TMP_SS_WORKER}" 2> /dev/null) ]] && ss_wget "${TMP_SS_WORKER}" "${SOURCEFORGE_SS_WORKER}"

####################################################################################################
#### G. SS-Check: Install Cron Jobs ################################################################
####################################################################################################

## here we install all the downloaded cron job files to their permanent location paths ##
## the root crontab will run the cron jobs which in turn run the bash scripts ##

## install 00-crontab only if valid ##
[[ -f "${TMP_00_CRONTAB}" && -n $(grep 'SS_EOF' "${TMP_00_CRONTAB}") ]] && ss_mv "${TMP_00_CRONTAB}" "${PATH_00_CRONTAB}"

## install 01-cron-minutely only if valid ##
[[ -f "${TMP_01_CRON_MINUTELY}" && -n $(grep 'SS_EOF' "${TMP_01_CRON_MINUTELY}") ]] && ss_mv "${TMP_01_CRON_MINUTELY}" "${PATH_01_CRON_MINUTELY}"

## install 02-cron-often only if valid ##
[[ -f "${TMP_02_CRON_OFTEN}" && -n $(grep 'SS_EOF' "${TMP_02_CRON_OFTEN}") ]] && ss_mv "${TMP_02_CRON_OFTEN}" "${PATH_02_CRON_OFTEN}"

## install 03-cron-regular only if valid ##
[[ -f "${TMP_03_CRON_REGULAR}" && -n $(grep 'SS_EOF' "${TMP_03_CRON_REGULAR}") ]] && ss_mv "${TMP_03_CRON_REGULAR}" "${PATH_03_CRON_REGULAR}"

## install 04-cron-quarter-hourly only if valid ##
[[ -f "${TMP_04_CRON_QUARTER_HOURLY}" && -n $(grep 'SS_EOF' "${TMP_04_CRON_QUARTER_HOURLY}") ]] && ss_mv "${TMP_04_CRON_QUARTER_HOURLY}" "${PATH_04_CRON_QUARTER_HOURLY}"

## install 05-cron-half-hourly only if valid ##
[[ -f "${TMP_05_CRON_HALF_HOURLY}" && -n $(grep 'SS_EOF' "${TMP_05_CRON_HALF_HOURLY}") ]] && ss_mv "${TMP_05_CRON_HALF_HOURLY}" "${PATH_05_CRON_HALF_HOURLY}"

## install 06-cron-hourly only if valid ##
[[ -f "${TMP_06_CRON_HOURLY}" && -n $(grep 'SS_EOF' "${TMP_06_CRON_HOURLY}") ]] && ss_mv "${TMP_06_CRON_HOURLY}" "${PATH_06_CRON_HOURLY}"

## install 07-cron-quarter-daily only if valid ##
[[ -f "${TMP_07_CRON_QUARTER_DAILY}" && -n $(grep 'SS_EOF' "${TMP_07_CRON_QUARTER_DAILY}") ]] && ss_mv "${TMP_07_CRON_QUARTER_DAILY}" "${PATH_07_CRON_QUARTER_DAILY}"

## install 08-cron-half-daily only if valid ##
[[ -f "${TMP_08_CRON_HALF_DAILY}" && -n $(grep 'SS_EOF' "${TMP_08_CRON_HALF_DAILY}") ]] && ss_mv "${TMP_08_CRON_HALF_DAILY}" "${PATH_08_CRON_HALF_DAILY}"

## install 09-cron-daily only if valid ##
[[ -f "${TMP_09_CRON_DAILY}" && -n $(grep 'SS_EOF' "${TMP_09_CRON_DAILY}") ]] && ss_mv "${TMP_09_CRON_DAILY}" "${PATH_09_CRON_DAILY}"

## install 10-cron-half-weekly only if valid ##
[[ -f "${TMP_10_CRON_HALF_WEEKLY}" && -n $(grep 'SS_EOF' "${TMP_10_CRON_HALF_WEEKLY}") ]] && ss_mv "${TMP_10_CRON_HALF_WEEKLY}" "${PATH_10_CRON_HALF_WEEKLY}"

## install 11-cron-weekly only if valid ##
[[ -f "${TMP_11_CRON_WEEKLY}" && -n $(grep 'SS_EOF' "${TMP_11_CRON_WEEKLY}") ]] && ss_mv "${TMP_11_CRON_WEEKLY}" "${PATH_11_CRON_WEEKLY}"

## install 12-cron-half-monthly only if valid ##
[[ -f "${TMP_12_CRON_HALF_MONTHLY}" && -n $(grep 'SS_EOF' "${TMP_12_CRON_HALF_MONTHLY}") ]] && ss_mv "${TMP_12_CRON_HALF_MONTHLY}" "${PATH_12_CRON_HALF_MONTHLY}"

## install 13-cron-monthly only if valid ##
[[ -f "${TMP_13_CRON_MONTHLY}" && -n $(grep 'SS_EOF' "${TMP_13_CRON_MONTHLY}") ]] && ss_mv "${TMP_13_CRON_MONTHLY}" "${PATH_13_CRON_MONTHLY}"

## install 14-cron-sometimes only if valid ##
[[ -f "${TMP_14_CRON_SOMETIMES}" && -n $(grep 'SS_EOF' "${TMP_14_CRON_SOMETIMES}") ]] && ss_mv "${TMP_14_CRON_SOMETIMES}" "${PATH_14_CRON_SOMETIMES}"

####################################################################################################
#### H. SS-Check: Install Custom Cron Job Boilerplates (If Not Exist) ##############################
####################################################################################################

## here we install boilerplates for custom cron jobs if none are found on your server ##
## you can then edit these files as needed and they will never be overwritten ##

## install 01-cron-minutely-custom only if valid ##
[[ -f "${TMP_01_CRON_MINUTELY_CUSTOM}" && -n $(grep 'SS_EOF' "${TMP_01_CRON_MINUTELY_CUSTOM}") ]] && ss_cp_if_not_exists "${TMP_01_CRON_MINUTELY_CUSTOM}" "${PATH_01_CRON_MINUTELY_CUSTOM}"

## install 02-cron-often-custom only if valid ##
[[ -f "${TMP_02_CRON_OFTEN_CUSTOM}" && -n $(grep 'SS_EOF' "${TMP_02_CRON_OFTEN_CUSTOM}") ]] && ss_cp_if_not_exists "${TMP_02_CRON_OFTEN_CUSTOM}" "${PATH_02_CRON_OFTEN_CUSTOM}"

## install 03-cron-regular-custom only if valid ##
[[ -f "${TMP_03_CRON_REGULAR_CUSTOM}" && -n $(grep 'SS_EOF' "${TMP_03_CRON_REGULAR_CUSTOM}") ]] && ss_cp_if_not_exists "${TMP_03_CRON_REGULAR_CUSTOM}" "${PATH_03_CRON_REGULAR_CUSTOM}"

## install 04-cron-quarter-hourly-custom only if valid ##
[[ -f "${TMP_04_CRON_QUARTER_HOURLY_CUSTOM}" && -n $(grep 'SS_EOF' "${TMP_04_CRON_QUARTER_HOURLY_CUSTOM}") ]] && ss_cp_if_not_exists "${TMP_04_CRON_QUARTER_HOURLY_CUSTOM}" "${PATH_04_CRON_QUARTER_HOURLY_CUSTOM}"

## install 05-cron-half-hourly-custom only if valid ##
[[ -f "${TMP_05_CRON_HALF_HOURLY_CUSTOM}" && -n $(grep 'SS_EOF' "${TMP_05_CRON_HALF_HOURLY_CUSTOM}") ]] && ss_cp_if_not_exists "${TMP_05_CRON_HALF_HOURLY_CUSTOM}" "${PATH_05_CRON_HALF_HOURLY_CUSTOM}"

## install 06-cron-hourly-custom only if valid ##
[[ -f "${TMP_06_CRON_HOURLY_CUSTOM}" && -n $(grep 'SS_EOF' "${TMP_06_CRON_HOURLY_CUSTOM}") ]] && ss_cp_if_not_exists "${TMP_06_CRON_HOURLY_CUSTOM}" "${PATH_06_CRON_HOURLY_CUSTOM}"

## install 07-cron-quarter-daily-custom only if valid ##
[[ -f "${TMP_07_CRON_QUARTER_DAILY_CUSTOM}" && -n $(grep 'SS_EOF' "${TMP_07_CRON_QUARTER_DAILY_CUSTOM}") ]] && ss_cp_if_not_exists "${TMP_07_CRON_QUARTER_DAILY_CUSTOM}" "${PATH_07_CRON_QUARTER_DAILY_CUSTOM}"

## install 08-cron-half-daily-custom only if valid ##
[[ -f "${TMP_08_CRON_HALF_DAILY_CUSTOM}" && -n $(grep 'SS_EOF' "${TMP_08_CRON_HALF_DAILY_CUSTOM}") ]] && ss_cp_if_not_exists "${TMP_08_CRON_HALF_DAILY_CUSTOM}" "${PATH_08_CRON_HALF_DAILY_CUSTOM}"

## install 09-cron-daily-custom only if valid ##
[[ -f "${TMP_09_CRON_DAILY_CUSTOM}" && -n $(grep 'SS_EOF' "${TMP_09_CRON_DAILY_CUSTOM}") ]] && ss_cp_if_not_exists "${TMP_09_CRON_DAILY_CUSTOM}" "${PATH_09_CRON_DAILY_CUSTOM}"

## install 10-cron-half-weekly-custom only if valid ##
[[ -f "${TMP_10_CRON_HALF_WEEKLY_CUSTOM}" && -n $(grep 'SS_EOF' "${TMP_10_CRON_HALF_WEEKLY_CUSTOM}") ]] && ss_cp_if_not_exists "${TMP_10_CRON_HALF_WEEKLY_CUSTOM}" "${PATH_10_CRON_HALF_WEEKLY_CUSTOM}"

## install 11-cron-weekly-custom only if valid ##
[[ -f "${TMP_11_CRON_WEEKLY_CUSTOM}" && -n $(grep 'SS_EOF' "${TMP_11_CRON_WEEKLY_CUSTOM}") ]] && ss_cp_if_not_exists "${TMP_11_CRON_WEEKLY_CUSTOM}" "${PATH_11_CRON_WEEKLY_CUSTOM}"

## install 12-cron-half-monthly-custom only if valid ##
[[ -f "${TMP_12_CRON_HALF_MONTHLY_CUSTOM}" && -n $(grep 'SS_EOF' "${TMP_12_CRON_HALF_MONTHLY_CUSTOM}") ]] && ss_cp_if_not_exists "${TMP_12_CRON_HALF_MONTHLY_CUSTOM}" "${PATH_12_CRON_HALF_MONTHLY_CUSTOM}"

## install 13-cron-monthly-custom only if valid ##
[[ -f "${TMP_13_CRON_MONTHLY_CUSTOM}" && -n $(grep 'SS_EOF' "${TMP_13_CRON_MONTHLY_CUSTOM}") ]] && ss_cp_if_not_exists "${TMP_13_CRON_MONTHLY_CUSTOM}" "${PATH_13_CRON_MONTHLY_CUSTOM}"

## install 14-cron-sometimes-custom only if valid ##
[[ -f "${TMP_14_CRON_SOMETIMES_CUSTOM}" && -n $(grep 'SS_EOF' "${TMP_14_CRON_SOMETIMES_CUSTOM}") ]] && ss_cp_if_not_exists "${TMP_14_CRON_SOMETIMES_CUSTOM}" "${PATH_14_CRON_SOMETIMES_CUSTOM}"

####################################################################################################
#### I. SS-Check: Install Bash Scripts (Except SS-Check) ###########################################
####################################################################################################

## here we install all the downloaded bash scripts to their permanent location paths ##
## the root crontab will run the cron jobs which in turn run the bash scripts ##

## ss-clean-database ##
VALIDATE2_TMP_SS_CLEAN_DATABASE=$(grep 'SS_EOF' "${TMP_SS_CLEAN_DATABASE}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_CLEAN_DATABASE}" ]]; then
    ss_mv "${TMP_SS_CLEAN_DATABASE}" "${PATH_SS_CLEAN_DATABASE}"
fi

## ss-clean-files ##
VALIDATE2_TMP_SS_CLEAN_FILES=$(grep 'SS_EOF' "${TMP_SS_CLEAN_FILES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_CLEAN_FILES}" ]]; then
    ss_mv "${TMP_SS_CLEAN_FILES}" "${PATH_SS_CLEAN_FILES}"
fi

## ss-config-sample ##
VALIDATE2_TMP_SS_CONFIG_SAMPLE=$(grep 'SS_EOF' "${TMP_SS_CONFIG_SAMPLE}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_CONFIG_SAMPLE}" ]]; then
    ss_mv "${TMP_SS_CONFIG_SAMPLE}" "${PATH_SS_CONFIG_SAMPLE}"
fi

## ss-dump-database ##
VALIDATE2_TMP_SS_DUMP_DATABASE=$(grep 'SS_EOF' "${TMP_SS_DUMP_DATABASE}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_DUMP_DATABASE}" ]]; then
    ss_mv "${TMP_SS_DUMP_DATABASE}" "${PATH_SS_DUMP_DATABASE}"
fi

## ss-dump-files ##
VALIDATE2_TMP_SS_DUMP_FILES=$(grep 'SS_EOF' "${TMP_SS_DUMP_FILES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_DUMP_FILES}" ]]; then
    ss_mv "${TMP_SS_DUMP_FILES}" "${PATH_SS_DUMP_FILES}"
fi

## ss-empty-logs ##
VALIDATE2_TMP_SS_EMPTY_LOGS=$(grep 'SS_EOF' "${TMP_SS_EMPTY_LOGS}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_EMPTY_LOGS}" ]]; then
    ss_mv "${TMP_SS_EMPTY_LOGS}" "${PATH_SS_EMPTY_LOGS}"
fi

## ss-encrypt-acme ##
VALIDATE2_TMP_SS_ENCRYPT_ACME=$(grep 'SS_EOF' "${TMP_SS_ENCRYPT_ACME}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_ENCRYPT_ACME}" ]]; then
    ss_mv "${TMP_SS_ENCRYPT_ACME}" "${PATH_SS_ENCRYPT_ACME}"
fi

## ss-encrypt-certbot ##
VALIDATE2_TMP_SS_ENCRYPT_CERTBOT=$(grep 'SS_EOF' "${TMP_SS_ENCRYPT_CERTBOT}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_ENCRYPT_CERTBOT}" ]]; then
    ss_mv "${TMP_SS_ENCRYPT_CERTBOT}" "${PATH_SS_ENCRYPT_CERTBOT}"
fi

## ss-encrypt-openssl ##
VALIDATE2_TMP_SS_ENCRYPT_OPENSSL=$(grep 'SS_EOF' "${TMP_SS_ENCRYPT_OPENSSL}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_ENCRYPT_OPENSSL}" ]]; then
    ss_mv "${TMP_SS_ENCRYPT_OPENSSL}" "${PATH_SS_ENCRYPT_OPENSSL}"
fi

## ss-functions ##
VALIDATE2_TMP_SS_FUNCTIONS=$(grep 'SS_EOF' "${TMP_SS_FUNCTIONS}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_FUNCTIONS}" ]]; then
    ss_mv "${TMP_SS_FUNCTIONS}" "${PATH_SS_FUNCTIONS}"
fi

## ss-import-database ##
VALIDATE2_TMP_SS_IMPORT_DATABASE=$(grep 'SS_EOF' "${TMP_SS_IMPORT_DATABASE}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_IMPORT_DATABASE}" ]]; then
    ss_mv "${TMP_SS_IMPORT_DATABASE}" "${PATH_SS_IMPORT_DATABASE}"
fi

## ss-import-files ##
VALIDATE2_TMP_SS_IMPORT_FILES=$(grep 'SS_EOF' "${TMP_SS_IMPORT_FILES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_IMPORT_FILES}" ]]; then
    ss_mv "${TMP_SS_IMPORT_FILES}" "${PATH_SS_IMPORT_FILES}"
fi

## ss-install ##
VALIDATE2_TMP_SS_INSTALL=$(grep 'SS_EOF' "${TMP_SS_INSTALL}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL}" ]]; then
    ss_mv "${TMP_SS_INSTALL}" "${PATH_SS_INSTALL}"
fi

## ss-install-fail2ban-config ##
VALIDATE2_TMP_SS_INSTALL_FAIL2BAN_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_FAIL2BAN_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_FAIL2BAN_CONFIG}" ]]; then
    ss_mv "${TMP_SS_INSTALL_FAIL2BAN_CONFIG}" "${PATH_SS_INSTALL_FAIL2BAN_CONFIG}"
fi

## ss-install-fail2ban-packages ##
VALIDATE2_TMP_SS_INSTALL_FAIL2BAN_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_INSTALL_FAIL2BAN_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_FAIL2BAN_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_INSTALL_FAIL2BAN_PACKAGES}" "${PATH_SS_INSTALL_FAIL2BAN_PACKAGES}"
fi

## ss-install-iptables-config ##
VALIDATE2_TMP_SS_INSTALL_IPTABLES_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_IPTABLES_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_IPTABLES_CONFIG}" ]]; then
    ss_mv "${TMP_SS_INSTALL_IPTABLES_CONFIG}" "${PATH_SS_INSTALL_IPTABLES_CONFIG}"
fi

## ss-install-iptables-packages ##
VALIDATE2_TMP_SS_INSTALL_IPTABLES_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_INSTALL_IPTABLES_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_IPTABLES_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_INSTALL_IPTABLES_PACKAGES}" "${PATH_SS_INSTALL_IPTABLES_PACKAGES}"
fi

## ss-install-memcached-config ##
VALIDATE2_TMP_SS_INSTALL_MEMCACHED_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_MEMCACHED_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_MEMCACHED_CONFIG}" ]]; then
    ss_mv "${TMP_SS_INSTALL_MEMCACHED_CONFIG}" "${PATH_SS_INSTALL_MEMCACHED_CONFIG}"
fi

## ss-install-memcached-packages ##
VALIDATE2_TMP_SS_INSTALL_MEMCACHED_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_INSTALL_MEMCACHED_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_MEMCACHED_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_INSTALL_MEMCACHED_PACKAGES}" "${PATH_SS_INSTALL_MEMCACHED_PACKAGES}"
fi

## ss-install-mysql-config ##
VALIDATE2_TMP_SS_INSTALL_MYSQL_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_MYSQL_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_MYSQL_CONFIG}" ]]; then
    ss_mv "${TMP_SS_INSTALL_MYSQL_CONFIG}" "${PATH_SS_INSTALL_MYSQL_CONFIG}"
fi

## ss-install-mysql-database ##
VALIDATE2_TMP_SS_INSTALL_MYSQL_DATABASE=$(grep 'SS_EOF' "${TMP_SS_INSTALL_MYSQL_DATABASE}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_MYSQL_DATABASE}" ]]; then
    ss_mv "${TMP_SS_INSTALL_MYSQL_DATABASE}" "${PATH_SS_INSTALL_MYSQL_DATABASE}"
fi

## ss-install-mysql-packages ##
VALIDATE2_TMP_SS_INSTALL_MYSQL_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_INSTALL_MYSQL_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_MYSQL_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_INSTALL_MYSQL_PACKAGES}" "${PATH_SS_INSTALL_MYSQL_PACKAGES}"
fi

## ss-install-nginx-config ##
VALIDATE2_TMP_SS_INSTALL_NGINX_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_NGINX_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_NGINX_CONFIG}" ]]; then
    ss_mv "${TMP_SS_INSTALL_NGINX_CONFIG}" "${PATH_SS_INSTALL_NGINX_CONFIG}"
fi

## ss-install-nginx-packages ##
VALIDATE2_TMP_SS_INSTALL_NGINX_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_INSTALL_NGINX_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_NGINX_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_INSTALL_NGINX_PACKAGES}" "${PATH_SS_INSTALL_NGINX_PACKAGES}"
fi

## ss-install-php-config ##
VALIDATE2_TMP_SS_INSTALL_PHP_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_PHP_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_PHP_CONFIG}" ]]; then
    ss_mv "${TMP_SS_INSTALL_PHP_CONFIG}" "${PATH_SS_INSTALL_PHP_CONFIG}"
fi

## ss-install-php-packages ##
VALIDATE2_TMP_SS_INSTALL_PHP_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_INSTALL_PHP_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_PHP_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_INSTALL_PHP_PACKAGES}" "${PATH_SS_INSTALL_PHP_PACKAGES}"
fi

## ss-install-rclone-config ##
VALIDATE2_TMP_SS_INSTALL_RCLONE_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_RCLONE_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_RCLONE_CONFIG}" ]]; then
    ss_mv "${TMP_SS_INSTALL_RCLONE_CONFIG}" "${PATH_SS_INSTALL_RCLONE_CONFIG}"
fi

## ss-install-rclone-packages ##
VALIDATE2_TMP_SS_INSTALL_RCLONE_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_INSTALL_RCLONE_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_RCLONE_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_INSTALL_RCLONE_PACKAGES}" "${PATH_SS_INSTALL_RCLONE_PACKAGES}"
fi

## ss-install-ubuntu-bash ##
VALIDATE2_TMP_SS_INSTALL_UBUNTU_BASH=$(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_BASH}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_UBUNTU_BASH}" ]]; then
    ss_mv "${TMP_SS_INSTALL_UBUNTU_BASH}" "${PATH_SS_INSTALL_UBUNTU_BASH}"
fi

## ss-install-ubuntu-crontab ##
VALIDATE2_TMP_SS_INSTALL_UBUNTU_CRONTAB=$(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_CRONTAB}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_UBUNTU_CRONTAB}" ]]; then
    ss_mv "${TMP_SS_INSTALL_UBUNTU_CRONTAB}" "${PATH_SS_INSTALL_UBUNTU_CRONTAB}"
fi

## ss-install-ubuntu-kernel ##
VALIDATE2_TMP_SS_INSTALL_UBUNTU_KERNEL=$(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_KERNEL}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_UBUNTU_KERNEL}" ]]; then
    ss_mv "${TMP_SS_INSTALL_UBUNTU_KERNEL}" "${PATH_SS_INSTALL_UBUNTU_KERNEL}"
fi

## ss-install-ubuntu-ssh ##
VALIDATE2_TMP_SS_INSTALL_UBUNTU_SSH=$(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_SSH}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_UBUNTU_SSH}" ]]; then
    ss_mv "${TMP_SS_INSTALL_UBUNTU_SSH}" "${PATH_SS_INSTALL_UBUNTU_SSH}"
fi

## ss-install-ubuntu-swapfile ##
VALIDATE2_TMP_SS_INSTALL_UBUNTU_SWAPFILE=$(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_SWAPFILE}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_UBUNTU_SWAPFILE}" ]]; then
    ss_mv "${TMP_SS_INSTALL_UBUNTU_SWAPFILE}" "${PATH_SS_INSTALL_UBUNTU_SWAPFILE}"
fi

## ss-install-ubuntu-users ##
VALIDATE2_TMP_SS_INSTALL_UBUNTU_USERS=$(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_USERS}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_UBUNTU_USERS}" ]]; then
    ss_mv "${TMP_SS_INSTALL_UBUNTU_USERS}" "${PATH_SS_INSTALL_UBUNTU_USERS}"
fi

## ss-install-ubuntu-utils ##
VALIDATE2_TMP_SS_INSTALL_UBUNTU_UTILS=$(grep 'SS_EOF' "${TMP_SS_INSTALL_UBUNTU_UTILS}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_UBUNTU_UTILS}" ]]; then
    ss_mv "${TMP_SS_INSTALL_UBUNTU_UTILS}" "${PATH_SS_INSTALL_UBUNTU_UTILS}"
fi

## ss-install-wordpress-cli ##
VALIDATE2_TMP_SS_INSTALL_WORDPRESS_CLI=$(grep 'SS_EOF' "${TMP_SS_INSTALL_WORDPRESS_CLI}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_WORDPRESS_CLI}" ]]; then
    ss_mv "${TMP_SS_INSTALL_WORDPRESS_CLI}" "${PATH_SS_INSTALL_WORDPRESS_CLI}"
fi

## ss-install-wordpress-config ##
VALIDATE2_TMP_SS_INSTALL_WORDPRESS_CONFIG=$(grep 'SS_EOF' "${TMP_SS_INSTALL_WORDPRESS_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_WORDPRESS_CONFIG}" ]]; then
    ss_mv "${TMP_SS_INSTALL_WORDPRESS_CONFIG}" "${PATH_SS_INSTALL_WORDPRESS_CONFIG}"
fi

## ss-install-wordpress-mu-plugins ##
VALIDATE2_TMP_SS_INSTALL_WORDPRESS_MU_PLUGINS=$(grep 'SS_EOF' "${TMP_SS_INSTALL_WORDPRESS_MU_PLUGINS}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_WORDPRESS_MU_PLUGINS}" ]]; then
    ss_mv "${TMP_SS_INSTALL_WORDPRESS_MU_PLUGINS}" "${PATH_SS_INSTALL_WORDPRESS_MU_PLUGINS}"
fi

## ss-install-wordpress-hovercraft ##
VALIDATE2_TMP_SS_INSTALL_WORDPRESS_HOVERCRAFT=$(grep 'SS_EOF' "${TMP_SS_INSTALL_WORDPRESS_HOVERCRAFT}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_WORDPRESS_HOVERCRAFT}" ]]; then
    ss_mv "${TMP_SS_INSTALL_WORDPRESS_HOVERCRAFT}" "${PATH_SS_INSTALL_WORDPRESS_HOVERCRAFT}"
fi

## ss-install-wordpress-packages ##
VALIDATE2_TMP_SS_INSTALL_WORDPRESS_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_INSTALL_WORDPRESS_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_INSTALL_WORDPRESS_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_INSTALL_WORDPRESS_PACKAGES}" "${PATH_SS_INSTALL_WORDPRESS_PACKAGES}"
fi

## ss-maintenance-disable ##
VALIDATE2_TMP_SS_MAINTENANCE_DISABLE=$(grep 'SS_EOF' "${TMP_SS_MAINTENANCE_DISABLE}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_MAINTENANCE_DISABLE}" ]]; then
    ss_mv "${TMP_SS_MAINTENANCE_DISABLE}" "${PATH_SS_MAINTENANCE_DISABLE}"
fi

## ss-maintenance-enable ##
VALIDATE2_TMP_SS_MAINTENANCE_ENABLE=$(grep 'SS_EOF' "${TMP_SS_MAINTENANCE_ENABLE}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_MAINTENANCE_ENABLE}" ]]; then
    ss_mv "${TMP_SS_MAINTENANCE_ENABLE}" "${PATH_SS_MAINTENANCE_ENABLE}"
fi

## ss-monitor-resources ##
VALIDATE2_TMP_SS_MONITOR_RESOURCES=$(grep 'SS_EOF' "${TMP_SS_MONITOR_RESOURCES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_MONITOR_RESOURCES}" ]]; then
    ss_mv "${TMP_SS_MONITOR_RESOURCES}" "${PATH_SS_MONITOR_RESOURCES}"
fi

## ss-optimize-database ##
VALIDATE2_TMP_SS_OPTIMIZE_DATABASE=$(grep 'SS_EOF' "${TMP_SS_OPTIMIZE_DATABASE}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_OPTIMIZE_DATABASE}" ]]; then
    ss_mv "${TMP_SS_OPTIMIZE_DATABASE}" "${PATH_SS_OPTIMIZE_DATABASE}"
fi

## ss-optimize-files ##
VALIDATE2_TMP_SS_OPTIMIZE_FILES=$(grep 'SS_EOF' "${TMP_SS_OPTIMIZE_FILES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_OPTIMIZE_FILES}" ]]; then
    ss_mv "${TMP_SS_OPTIMIZE_FILES}" "${PATH_SS_OPTIMIZE_FILES}"
fi

## ss-perms ##
VALIDATE2_TMP_SS_PERMS=$(grep 'SS_EOF' "${TMP_SS_PERMS}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS}" ]]; then
    ss_mv "${TMP_SS_PERMS}" "${PATH_SS_PERMS}"
fi

## ss-perms-fail2ban-config ##
VALIDATE2_TMP_SS_PERMS_FAIL2BAN_CONFIG=$(grep 'SS_EOF' "${TMP_SS_PERMS_FAIL2BAN_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_FAIL2BAN_CONFIG}" ]]; then
    ss_mv "${TMP_SS_PERMS_FAIL2BAN_CONFIG}" "${PATH_SS_PERMS_FAIL2BAN_CONFIG}"
fi

## ss-perms-fail2ban-packages ##
VALIDATE2_TMP_SS_PERMS_FAIL2BAN_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_PERMS_FAIL2BAN_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_FAIL2BAN_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_PERMS_FAIL2BAN_PACKAGES}" "${PATH_SS_PERMS_FAIL2BAN_PACKAGES}"
fi

## ss-perms-iptables-config ##
VALIDATE2_TMP_SS_PERMS_IPTABLES_CONFIG=$(grep 'SS_EOF' "${TMP_SS_PERMS_IPTABLES_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_IPTABLES_CONFIG}" ]]; then
    ss_mv "${TMP_SS_PERMS_IPTABLES_CONFIG}" "${PATH_SS_PERMS_IPTABLES_CONFIG}"
fi

## ss-perms-iptables-packages ##
VALIDATE2_TMP_SS_PERMS_IPTABLES_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_PERMS_IPTABLES_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_IPTABLES_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_PERMS_IPTABLES_PACKAGES}" "${PATH_SS_PERMS_IPTABLES_PACKAGES}"
fi

## ss-perms-memcached-config ##
VALIDATE2_TMP_SS_PERMS_MEMCACHED_CONFIG=$(grep 'SS_EOF' "${TMP_SS_PERMS_MEMCACHED_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_MEMCACHED_CONFIG}" ]]; then
    ss_mv "${TMP_SS_PERMS_MEMCACHED_CONFIG}" "${PATH_SS_PERMS_MEMCACHED_CONFIG}"
fi

## ss-perms-memcached-packages ##
VALIDATE2_TMP_SS_PERMS_MEMCACHED_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_PERMS_MEMCACHED_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_MEMCACHED_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_PERMS_MEMCACHED_PACKAGES}" "${PATH_SS_PERMS_MEMCACHED_PACKAGES}"
fi

## ss-perms-mysql-config ##
VALIDATE2_TMP_SS_PERMS_MYSQL_CONFIG=$(grep 'SS_EOF' "${TMP_SS_PERMS_MYSQL_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_MYSQL_CONFIG}" ]]; then
    ss_mv "${TMP_SS_PERMS_MYSQL_CONFIG}" "${PATH_SS_PERMS_MYSQL_CONFIG}"
fi

## ss-perms-mysql-database ##
VALIDATE2_TMP_SS_PERMS_MYSQL_DATABASE=$(grep 'SS_EOF' "${TMP_SS_PERMS_MYSQL_DATABASE}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_MYSQL_DATABASE}" ]]; then
    ss_mv "${TMP_SS_PERMS_MYSQL_DATABASE}" "${PATH_SS_PERMS_MYSQL_DATABASE}"
fi

## ss-perms-mysql-packages ##
VALIDATE2_TMP_SS_PERMS_MYSQL_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_PERMS_MYSQL_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_MYSQL_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_PERMS_MYSQL_PACKAGES}" "${PATH_SS_PERMS_MYSQL_PACKAGES}"
fi

## ss-perms-nginx-config ##
VALIDATE2_TMP_SS_PERMS_NGINX_CONFIG=$(grep 'SS_EOF' "${TMP_SS_PERMS_NGINX_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_NGINX_CONFIG}" ]]; then
    ss_mv "${TMP_SS_PERMS_NGINX_CONFIG}" "${PATH_SS_PERMS_NGINX_CONFIG}"
fi

## ss-perms-nginx-packages ##
VALIDATE2_TMP_SS_PERMS_NGINX_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_PERMS_NGINX_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_NGINX_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_PERMS_NGINX_PACKAGES}" "${PATH_SS_PERMS_NGINX_PACKAGES}"
fi

## ss-perms-php-config ##
VALIDATE2_TMP_SS_PERMS_PHP_CONFIG=$(grep 'SS_EOF' "${TMP_SS_PERMS_PHP_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_PHP_CONFIG}" ]]; then
    ss_mv "${TMP_SS_PERMS_PHP_CONFIG}" "${PATH_SS_PERMS_PHP_CONFIG}"
fi

## ss-perms-php-packages ##
VALIDATE2_TMP_SS_PERMS_PHP_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_PERMS_PHP_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_PHP_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_PERMS_PHP_PACKAGES}" "${PATH_SS_PERMS_PHP_PACKAGES}"
fi

## ss-perms-rclone-config ##
VALIDATE2_TMP_SS_PERMS_RCLONE_CONFIG=$(grep 'SS_EOF' "${TMP_SS_PERMS_RCLONE_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_RCLONE_CONFIG}" ]]; then
    ss_mv "${TMP_SS_PERMS_RCLONE_CONFIG}" "${PATH_SS_PERMS_RCLONE_CONFIG}"
fi

## ss-perms-rclone-packages ##
VALIDATE2_TMP_SS_PERMS_RCLONE_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_PERMS_RCLONE_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_RCLONE_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_PERMS_RCLONE_PACKAGES}" "${PATH_SS_PERMS_RCLONE_PACKAGES}"
fi

## ss-perms-ubuntu-bash ##
VALIDATE2_TMP_SS_PERMS_UBUNTU_BASH=$(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_BASH}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_UBUNTU_BASH}" ]]; then
    ss_mv "${TMP_SS_PERMS_UBUNTU_BASH}" "${PATH_SS_PERMS_UBUNTU_BASH}"
fi

## ss-perms-ubuntu-crontab ##
VALIDATE2_TMP_SS_PERMS_UBUNTU_CRONTAB=$(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_CRONTAB}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_UBUNTU_CRONTAB}" ]]; then
    ss_mv "${TMP_SS_PERMS_UBUNTU_CRONTAB}" "${PATH_SS_PERMS_UBUNTU_CRONTAB}"
fi

## ss-perms-ubuntu-kernel ##
VALIDATE2_TMP_SS_PERMS_UBUNTU_KERNEL=$(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_KERNEL}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_UBUNTU_KERNEL}" ]]; then
    ss_mv "${TMP_SS_PERMS_UBUNTU_KERNEL}" "${PATH_SS_PERMS_UBUNTU_KERNEL}"
fi

## ss-perms-ubuntu-ssh ##
VALIDATE2_TMP_SS_PERMS_UBUNTU_SSH=$(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_SSH}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_UBUNTU_SSH}" ]]; then
    ss_mv "${TMP_SS_PERMS_UBUNTU_SSH}" "${PATH_SS_PERMS_UBUNTU_SSH}"
fi

## ss-perms-ubuntu-swapfile ##
VALIDATE2_TMP_SS_PERMS_UBUNTU_SWAPFILE=$(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_SWAPFILE}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_UBUNTU_SWAPFILE}" ]]; then
    ss_mv "${TMP_SS_PERMS_UBUNTU_SWAPFILE}" "${PATH_SS_PERMS_UBUNTU_SWAPFILE}"
fi

## ss-perms-ubuntu-users ##
VALIDATE2_TMP_SS_PERMS_UBUNTU_USERS=$(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_USERS}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_UBUNTU_USERS}" ]]; then
    ss_mv "${TMP_SS_PERMS_UBUNTU_USERS}" "${PATH_SS_PERMS_UBUNTU_USERS}"
fi

## ss-perms-ubuntu-utils ##
VALIDATE2_TMP_SS_PERMS_UBUNTU_UTILS=$(grep 'SS_EOF' "${TMP_SS_PERMS_UBUNTU_UTILS}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_UBUNTU_UTILS}" ]]; then
    ss_mv "${TMP_SS_PERMS_UBUNTU_UTILS}" "${PATH_SS_PERMS_UBUNTU_UTILS}"
fi

## ss-perms-wordpress-cli ##
VALIDATE2_TMP_SS_PERMS_WORDPRESS_CLI=$(grep 'SS_EOF' "${TMP_SS_PERMS_WORDPRESS_CLI}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_WORDPRESS_CLI}" ]]; then
    ss_mv "${TMP_SS_PERMS_WORDPRESS_CLI}" "${PATH_SS_PERMS_WORDPRESS_CLI}"
fi

## ss-perms-wordpress-config ##
VALIDATE2_TMP_SS_PERMS_WORDPRESS_CONFIG=$(grep 'SS_EOF' "${TMP_SS_PERMS_WORDPRESS_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_WORDPRESS_CONFIG}" ]]; then
    ss_mv "${TMP_SS_PERMS_WORDPRESS_CONFIG}" "${PATH_SS_PERMS_WORDPRESS_CONFIG}"
fi

## ss-perms-wordpress-mu-plugins ##
VALIDATE2_TMP_SS_PERMS_WORDPRESS_MU_PLUGINS=$(grep 'SS_EOF' "${TMP_SS_PERMS_WORDPRESS_MU_PLUGINS}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_WORDPRESS_MU_PLUGINS}" ]]; then
    ss_mv "${TMP_SS_PERMS_WORDPRESS_MU_PLUGINS}" "${PATH_SS_PERMS_WORDPRESS_MU_PLUGINS}"
fi

## ss-perms-wordpress-packages ##
VALIDATE2_TMP_SS_PERMS_WORDPRESS_PACKAGES=$(grep 'SS_EOF' "${TMP_SS_PERMS_WORDPRESS_PACKAGES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PERMS_WORDPRESS_PACKAGES}" ]]; then
    ss_mv "${TMP_SS_PERMS_WORDPRESS_PACKAGES}" "${PATH_SS_PERMS_WORDPRESS_PACKAGES}"
fi

## ss-purge ##
VALIDATE2_TMP_SS_PURGE_NGINX=$(grep 'SS_EOF' "${TMP_SS_PURGE_NGINX}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PURGE_NGINX}" ]]; then
    ss_mv "${TMP_SS_PURGE_NGINX}" "${PATH_SS_PURGE_NGINX}"
fi

## ss-purge-opcache ##
VALIDATE2_TMP_SS_PURGE_OPCACHE=$(grep 'SS_EOF' "${TMP_SS_PURGE_OPCACHE}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PURGE_OPCACHE}" ]]; then
    ss_mv "${TMP_SS_PURGE_OPCACHE}" "${PATH_SS_PURGE_OPCACHE}"
fi

## ss-purge-memcached ##
VALIDATE2_TMP_SS_PURGE_MEMCACHED=$(grep 'SS_EOF' "${TMP_SS_PURGE_MEMCACHED}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PURGE_MEMCACHED}" ]]; then
    ss_mv "${TMP_SS_PURGE_MEMCACHED}" "${PATH_SS_PURGE_MEMCACHED}"
fi

## ss-purge-transients ##
VALIDATE2_TMP_SS_PURGE_TRANSIENTS=$(grep 'SS_EOF' "${TMP_SS_PURGE_TRANSIENTS}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PURGE_TRANSIENTS}" ]]; then
    ss_mv "${TMP_SS_PURGE_TRANSIENTS}" "${PATH_SS_PURGE_TRANSIENTS}"
fi

## ss-push-development ##
VALIDATE2_TMP_SS_PUSH_DEVELOPMENT=$(grep 'SS_EOF' "${TMP_SS_PUSH_DEVELOPMENT}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PUSH_DEVELOPMENT}" ]]; then
    ss_mv "${TMP_SS_PUSH_DEVELOPMENT}" "${PATH_SS_PUSH_DEVELOPMENT}"
fi

## ss-push-staging ##
VALIDATE2_TMP_SS_PUSH_STAGING=$(grep 'SS_EOF' "${TMP_SS_PUSH_STAGING}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_PUSH_STAGING}" ]]; then
    ss_mv "${TMP_SS_PUSH_STAGING}" "${PATH_SS_PUSH_STAGING}"
fi

## ss-reboot-machine ##
VALIDATE2_TMP_SS_REBOOT_MACHINE=$(grep 'SS_EOF' "${TMP_SS_REBOOT_MACHINE}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_REBOOT_MACHINE}" ]]; then
    ss_mv "${TMP_SS_REBOOT_MACHINE}" "${PATH_SS_REBOOT_MACHINE}"
fi

## ss-remote-backup ##
VALIDATE2_TMP_SS_REMOTE_BACKUP=$(grep 'SS_EOF' "${TMP_SS_REMOTE_BACKUP}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_REMOTE_BACKUP}" ]]; then
    ss_mv "${TMP_SS_REMOTE_BACKUP}" "${PATH_SS_REMOTE_BACKUP}"
fi

## ss-reset-password-sftp ##
VALIDATE2_TMP_SS_RESET_PASSWORD_SFTP=$(grep 'SS_EOF' "${TMP_SS_RESET_PASSWORD_SFTP}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_RESET_PASSWORD_SFTP}" ]]; then
    ss_mv "${TMP_SS_RESET_PASSWORD_SFTP}" "${PATH_SS_RESET_PASSWORD_SFTP}"
fi

## ss-restart-fail2ban ##
VALIDATE2_TMP_SS_RESTART_FAIL2BAN=$(grep 'SS_EOF' "${TMP_SS_RESTART_FAIL2BAN}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_RESTART_FAIL2BAN}" ]]; then
    ss_mv "${TMP_SS_RESTART_FAIL2BAN}" "${PATH_SS_RESTART_FAIL2BAN}"
fi

## ss-restart-memcached ##
VALIDATE2_TMP_SS_RESTART_MEMCACHED=$(grep 'SS_EOF' "${TMP_SS_RESTART_MEMCACHED}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_RESTART_MEMCACHED}" ]]; then
    ss_mv "${TMP_SS_RESTART_MEMCACHED}" "${PATH_SS_RESTART_MEMCACHED}"
fi

## ss-restart-mysql ##
VALIDATE2_TMP_SS_RESTART_MYSQL=$(grep 'SS_EOF' "${TMP_SS_RESTART_MYSQL}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_RESTART_MYSQL}" ]]; then
    ss_mv "${TMP_SS_RESTART_MYSQL}" "${PATH_SS_RESTART_MYSQL}"
fi

## ss-restart-nginx ##
VALIDATE2_TMP_SS_RESTART_NGINX=$(grep 'SS_EOF' "${TMP_SS_RESTART_NGINX}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_RESTART_NGINX}" ]]; then
    ss_mv "${TMP_SS_RESTART_NGINX}" "${PATH_SS_RESTART_NGINX}"
fi

## ss-restart-php ##
VALIDATE2_TMP_SS_RESTART_PHP=$(grep 'SS_EOF' "${TMP_SS_RESTART_PHP}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_RESTART_PHP}" ]]; then
    ss_mv "${TMP_SS_RESTART_PHP}" "${PATH_SS_RESTART_PHP}"
fi

## ss-stack-overview ##
VALIDATE2_TMP_SS_STACK_OVERVIEW=$(grep 'SS_EOF' "${TMP_SS_STACK_OVERVIEW}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_STACK_OVERVIEW}" ]]; then
    ss_mv "${TMP_SS_STACK_OVERVIEW}" "${PATH_SS_STACK_OVERVIEW}"
fi

## ss-sync-development ##
VALIDATE2_TMP_SS_SYNC_DEVELOPMENT=$(grep 'SS_EOF' "${TMP_SS_SYNC_DEVELOPMENT}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_SYNC_DEVELOPMENT}" ]]; then
    ss_mv "${TMP_SS_SYNC_DEVELOPMENT}" "${PATH_SS_SYNC_DEVELOPMENT}"
fi

## ss-sync-staging ##
VALIDATE2_TMP_SS_SYNC_STAGING=$(grep 'SS_EOF' "${TMP_SS_SYNC_STAGING}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_SYNC_STAGING}" ]]; then
    ss_mv "${TMP_SS_SYNC_STAGING}" "${PATH_SS_SYNC_STAGING}"
fi

## ss-update-config ##
VALIDATE2_TMP_SS_UPDATE_CONFIG=$(grep 'SS_EOF' "${TMP_SS_UPDATE_CONFIG}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_UPDATE_CONFIG}" ]]; then
    ss_mv "${TMP_SS_UPDATE_CONFIG}" "${PATH_SS_UPDATE_CONFIG}"
fi

## ss-update-modules ##
VALIDATE2_TMP_SS_UPDATE_MODULES=$(grep 'SS_EOF' "${TMP_SS_UPDATE_MODULES}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_UPDATE_MODULES}" ]]; then
    ss_mv "${TMP_SS_UPDATE_MODULES}" "${PATH_SS_UPDATE_MODULES}"
fi

## ss-worker ##
VALIDATE2_TMP_SS_WORKER=$(grep 'SS_EOF' "${TMP_SS_WORKER}" 2> /dev/null)
if [[ -n "${VALIDATE2_TMP_SS_WORKER}" ]]; then
    ss_mv "${TMP_SS_WORKER}" "${PATH_SS_WORKER}"
fi

####################################################################################################
#### SlickStack: Reset Permissions (SlickStack Scripts) ############################################
####################################################################################################

## we include this permissions reset in all cron jobs and bash scripts for redundancy ##
## chmod 0700 means only the root/sudo users can execute any SlickStack scripts ##

## THIS SNIPPET DOES NOT RELY ON SS-CONFIG OR SS-FUNCTIONS
## SNIPPET: ss bash scripts, ss cron jobs
## UPDATED: 02JUL2022

chown root:root /var/www/ss* ## must be root:root
chown root:root /var/www/crons/*cron* ## must be root:root
chown root:root /var/www/crons/custom/*cron* ## must be root:root
chmod 0700 /var/www/ss* ## 0700 means only root/sudo can execute
chmod 0700 /var/www/crons/*cron* ## 0700 means only root/sudo can execute
chmod 0700 /var/www/crons/custom/*cron* ## 0700 means only root/sudo can execute

####################################################################################################
#### SlickStack: External References Used To Improve This Script (Thanks, Interwebz) ###############
####################################################################################################

## Ref: https://linuxize.com/post/bash-functions/
## Ref: https://stackoverflow.com/questions/6366530/bash-syntax-error-unexpected-end-of-file
## Ref: https://gist.github.com/onnimonni/b49779ebc96216771a6be3de46449fa1
## Ref: https://www.putorius.net/linux-checksum-file-integrity-check.html
## Ref: https://unix.stackexchange.com/questions/254868/use-md5sum-to-verify-file-in-a-script
## Ref: https://unix.stackexchange.com/questions/118085/transform-a-directory-into-file-or-a-file-into-directory

## SS_EOF
